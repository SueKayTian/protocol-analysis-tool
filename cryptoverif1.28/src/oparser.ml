type token =
  | COMMA
  | LPAREN
  | RPAREN
  | LBRACKET
  | RBRACKET
  | BAR
  | SEMI
  | COLON
  | IDENT of (Ptree.ident)
  | STRING of (Ptree.ident)
  | INT of (int)
  | FLOAT of (float)
  | FOREACH
  | DO
  | LEQ
  | IF
  | THEN
  | ELSE
  | FIND
  | ORFIND
  | SUCHTHAT
  | DEFINED
  | EQUAL
  | DIFF
  | FORALL
  | EQUATION
  | PARAM
  | PROBA
  | TYPE
  | PROCESS
  | DOT
  | EOF
  | LET
  | QUERY
  | SECRET
  | SECRET1
  | PUBLICVARS
  | AND
  | OR
  | CONST
  | EQUIV
  | EQUIVLEFT
  | EQUIVRIGHT
  | MUL
  | DIV
  | ADD
  | SUB
  | POWER
  | SET
  | COLLISION
  | EVENT
  | IMPLIES
  | TIME
  | END
  | EVENT_ABORT
  | OTHERUSES
  | MAXLENGTH
  | LENGTH
  | MAX
  | COUNT
  | EPSFIND
  | EPSRAND
  | PCOLL1RAND
  | PCOLL2RAND
  | NEWORACLE
  | INJ
  | MAPSTO
  | DEF
  | LEFTARROW
  | RANDOM
  | RETURN
  | FUN
  | IN
  | DEFINE
  | EXPAND
  | LBRACE
  | RBRACE
  | PROOF
  | IMPLEMENTATION
  | READ
  | WRITE
  | GET
  | INSERT
  | TABLE
  | LETFUN

open Parsing;;
let _ = parse_error;;
# 2 "oparser.mly"
(*************************************************************
 *                                                           *
 *       Cryptographic protocol verifier                     *
 *                                                           *
 *       Bruno Blanchet and David Cadé                       *
 *                                                           *
 *       Copyright (C) ENS, CNRS, INRIA, 2005-2017           *
 *                                                           *
 *************************************************************)

(*

    Copyright ENS, CNRS, INRIA 
    contributors: Bruno Blanchet, Bruno.Blanchet@inria.fr
                  David Cadé

This software is a computer program whose purpose is to verify 
cryptographic protocols in the computational model.

This software is governed by the CeCILL-B license under French law and
abiding by the rules of distribution of free software.  You can  use, 
modify and/ or redistribute the software under the terms of the CeCILL-B
license as circulated by CEA, CNRS and INRIA at the following URL
"http://www.cecill.info". 

As a counterpart to the access to the source code and  rights to copy,
modify and redistribute granted by the license, users are provided only
with a limited warranty  and the software's author,  the holder of the
economic rights,  and the successive licensors  have only  limited
liability. 

In this respect, the user's attention is drawn to the risks associated
with loading,  using,  modifying and/or developing or reproducing the
software by the user in light of its specific status of free software,
that may mean  that it is complicated to manipulate,  and  that  also
therefore means  that it is reserved for developers  and  experienced
professionals having in-depth computer knowledge. Users are therefore
encouraged to load and test the software's suitability as regards their
requirements in conditions enabling the security of their systems and/or 
data to be ensured and,  more generally, to use and operate it in the 
same conditions as regards security. 

The fact that you are presently reading this means that you have had
knowledge of the CeCILL-B license and that you accept its terms.

*)
# 50 "oparser.mly"

open Parsing_helper
open Types
open Ptree
exception Syntax

let cst_true = (PIdent ("true", dummy_ext), dummy_ext)

let dummy_channel = ("@dummy_channel", dummy_ext)

let return_channel = dummy_channel

# 151 "oparser.ml"
let yytransl_const = [|
  257 (* COMMA *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACKET *);
  261 (* RBRACKET *);
  262 (* BAR *);
  263 (* SEMI *);
  264 (* COLON *);
  269 (* FOREACH *);
  270 (* DO *);
  271 (* LEQ *);
  272 (* IF *);
  273 (* THEN *);
  274 (* ELSE *);
  275 (* FIND *);
  276 (* ORFIND *);
  277 (* SUCHTHAT *);
  278 (* DEFINED *);
  279 (* EQUAL *);
  280 (* DIFF *);
  281 (* FORALL *);
  282 (* EQUATION *);
  283 (* PARAM *);
  284 (* PROBA *);
  285 (* TYPE *);
  286 (* PROCESS *);
  287 (* DOT *);
    0 (* EOF *);
  288 (* LET *);
  289 (* QUERY *);
  290 (* SECRET *);
  291 (* SECRET1 *);
  292 (* PUBLICVARS *);
  293 (* AND *);
  294 (* OR *);
  295 (* CONST *);
  296 (* EQUIV *);
  297 (* EQUIVLEFT *);
  298 (* EQUIVRIGHT *);
  299 (* MUL *);
  300 (* DIV *);
  301 (* ADD *);
  302 (* SUB *);
  303 (* POWER *);
  304 (* SET *);
  305 (* COLLISION *);
  306 (* EVENT *);
  307 (* IMPLIES *);
  308 (* TIME *);
  309 (* END *);
  310 (* EVENT_ABORT *);
  311 (* OTHERUSES *);
  312 (* MAXLENGTH *);
  313 (* LENGTH *);
  314 (* MAX *);
  315 (* COUNT *);
  316 (* EPSFIND *);
  317 (* EPSRAND *);
  318 (* PCOLL1RAND *);
  319 (* PCOLL2RAND *);
  320 (* NEWORACLE *);
  321 (* INJ *);
  322 (* MAPSTO *);
  323 (* DEF *);
  324 (* LEFTARROW *);
  325 (* RANDOM *);
  326 (* RETURN *);
  327 (* FUN *);
  328 (* IN *);
  329 (* DEFINE *);
  330 (* EXPAND *);
  331 (* LBRACE *);
  332 (* RBRACE *);
  333 (* PROOF *);
  334 (* IMPLEMENTATION *);
  335 (* READ *);
  336 (* WRITE *);
  337 (* GET *);
  338 (* INSERT *);
  339 (* TABLE *);
  340 (* LETFUN *);
    0|]

let yytransl_block = [|
  265 (* IDENT *);
  266 (* STRING *);
  267 (* INT *);
  268 (* FLOAT *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\019\000\019\000\020\000\020\000\020\000\020\000\021\000\021\000\
\024\000\024\000\025\000\026\000\026\000\022\000\022\000\027\000\
\028\000\028\000\023\000\023\000\029\000\029\000\030\000\030\000\
\031\000\031\000\032\000\032\000\032\000\032\000\032\000\032\000\
\032\000\032\000\032\000\032\000\032\000\033\000\033\000\018\000\
\018\000\008\000\008\000\001\000\007\000\007\000\012\000\012\000\
\009\000\009\000\034\000\034\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\041\000\041\000\042\000\042\000\043\000\043\000\
\044\000\044\000\044\000\044\000\036\000\036\000\036\000\045\000\
\037\000\037\000\047\000\047\000\046\000\046\000\048\000\048\000\
\035\000\035\000\049\000\050\000\050\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\055\000\053\000\053\000\051\000\
\051\000\054\000\054\000\052\000\052\000\038\000\038\000\039\000\
\039\000\039\000\039\000\039\000\056\000\056\000\040\000\040\000\
\011\000\011\000\057\000\057\000\057\000\057\000\058\000\058\000\
\060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
\060\000\062\000\061\000\061\000\013\000\013\000\013\000\014\000\
\014\000\063\000\063\000\017\000\017\000\065\000\065\000\066\000\
\066\000\066\000\016\000\016\000\016\000\059\000\059\000\067\000\
\067\000\067\000\067\000\064\000\064\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\069\000\069\000\
\068\000\068\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\071\000\070\000\070\000\072\000\072\000\073\000\073\000\
\074\000\074\000\006\000\006\000\075\000\075\000\076\000\076\000\
\077\000\077\000\077\000\077\000\078\000\078\000\079\000\079\000\
\004\000\004\000\004\000\004\000\004\000\000\000\000\000\000\000\
\000\000\000\000\000\000"

let yylen = "\002\000\
\010\000\004\000\007\000\006\000\007\000\006\000\006\000\006\000\
\004\000\005\000\004\000\006\000\005\000\010\000\018\000\015\000\
\009\000\007\000\005\000\004\000\007\000\006\000\009\000\000\000\
\001\000\003\000\005\000\005\000\004\000\004\000\001\000\001\000\
\001\000\003\000\003\000\001\000\003\000\003\000\000\000\003\000\
\001\000\003\000\003\000\000\000\003\000\000\000\001\000\003\000\
\003\000\003\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\002\000\001\000\
\003\000\003\000\000\000\004\000\000\000\001\000\001\000\003\000\
\000\000\001\000\003\000\005\000\004\000\003\000\006\000\001\000\
\004\000\003\000\006\000\005\000\005\000\008\000\006\000\005\000\
\002\000\004\000\007\000\007\000\011\000\009\000\003\000\003\000\
\003\000\003\000\004\000\001\000\001\000\003\000\006\000\004\000\
\008\000\006\000\006\000\004\000\001\000\001\000\003\000\005\000\
\001\000\003\000\003\000\005\000\001\000\000\000\003\000\001\000\
\001\000\000\000\003\000\001\000\000\000\002\000\003\000\001\000\
\006\000\001\000\004\000\005\000\004\000\006\000\010\000\008\000\
\003\000\006\000\003\000\005\000\004\000\007\000\006\000\006\000\
\003\000\001\000\002\000\003\000\005\000\001\000\003\000\002\000\
\000\000\002\000\000\000\002\000\000\000\001\000\003\000\001\000\
\003\000\004\000\003\000\002\000\003\000\001\000\001\000\000\000\
\001\000\003\000\003\000\003\000\006\000\004\000\000\000\002\000\
\004\000\003\000\006\000\005\000\005\000\008\000\006\000\005\000\
\002\000\005\000\001\000\003\000\001\000\004\000\000\000\001\000\
\003\000\001\000\004\000\000\000\005\000\001\000\003\000\001\000\
\003\000\006\000\004\000\004\000\001\000\000\000\001\000\003\000\
\005\000\003\000\005\000\007\000\006\000\003\000\003\000\003\000\
\003\000\003\000\004\000\001\000\002\000\004\000\003\000\001\000\
\005\000\006\000\004\000\006\000\006\000\007\000\008\000\004\000\
\004\000\005\000\004\000\004\000\005\000\001\000\001\000\004\000\
\005\000\007\000\001\000\004\000\004\000\004\000\002\000\000\000\
\001\000\003\000\003\000\003\000\002\000\002\000\005\000\003\000\
\005\000\004\000\001\000\003\000\001\000\003\000\003\000\001\000\
\003\000\003\000\001\000\003\000\003\000\005\000\003\000\005\000\
\003\000\004\000\003\000\004\000\001\000\003\000\001\000\002\000\
\000\000\001\000\001\000\002\000\001\000\002\000\002\000\002\000\
\002\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\030\001\000\000\031\001\000\000\000\000\000\000\
\000\000\000\000\032\001\000\000\000\000\026\001\033\001\000\000\
\029\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\035\001\000\000\000\000\000\000\000\000\000\000\074\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\207\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\109\000\
\000\000\000\000\117\000\253\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\024\001\000\000\028\001\
\000\000\000\000\121\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\089\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\059\000\060\000\061\000\051\000\052\000\053\000\058\000\
\055\000\054\000\056\000\057\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\130\000\000\000\000\000\000\000\000\000\000\000\
\146\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\159\000\251\000\000\000\000\000\252\000\000\000\000\000\000\000\
\000\000\000\000\167\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\022\001\000\000\
\082\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\096\000\000\000\000\000\000\000\006\001\010\001\007\001\009\001\
\012\001\000\000\000\000\000\000\070\000\072\000\000\000\011\000\
\000\000\000\000\000\000\000\000\000\000\171\000\172\000\000\000\
\009\000\170\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\002\000\000\000\000\000\000\000\000\000\063\000\000\000\000\000\
\000\000\000\000\000\000\020\000\026\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\147\000\000\000\124\000\000\000\000\000\000\000\
\000\000\068\000\000\000\000\000\111\000\000\000\000\000\000\000\
\000\000\000\000\004\001\000\000\163\000\000\000\161\000\000\000\
\000\000\000\000\000\000\018\001\020\001\119\000\077\000\081\000\
\000\000\000\000\066\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\010\000\013\000\000\000\000\000\000\000\176\000\000\000\000\000\
\000\000\190\000\000\000\000\000\000\000\000\000\000\000\238\000\
\239\000\000\000\000\000\000\000\000\000\000\000\243\000\000\000\
\000\000\000\000\000\000\193\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\019\000\065\000\
\032\000\031\000\000\000\030\000\000\000\029\000\000\000\000\000\
\000\000\127\000\000\000\000\000\000\000\000\000\000\000\123\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\137\000\000\000\000\000\145\000\000\000\000\000\148\000\000\000\
\000\000\000\000\000\000\000\000\002\001\165\000\162\000\001\001\
\255\000\000\000\000\000\000\000\000\000\000\000\114\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\076\000\004\000\
\000\000\006\000\209\000\211\000\000\000\012\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\221\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\195\000\007\000\008\000\197\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\027\000\000\000\028\000\000\000\000\000\
\022\000\000\000\000\000\000\000\045\000\000\000\131\000\000\000\
\000\000\000\000\000\000\133\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\102\000\000\000\
\116\000\000\000\000\000\000\000\000\000\000\000\000\000\079\000\
\000\000\000\000\000\000\005\000\000\000\000\000\000\000\000\000\
\000\000\214\000\223\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\217\000\218\000\000\000\000\000\000\000\000\000\003\000\
\000\000\000\000\018\000\000\000\000\000\000\000\000\000\000\000\
\000\000\021\000\000\000\000\000\050\000\049\000\048\000\000\000\
\132\000\000\000\000\000\151\000\000\000\000\000\000\000\000\000\
\000\000\000\000\099\000\000\000\000\000\000\000\014\001\016\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\200\000\213\000\000\000\222\000\000\000\
\000\000\000\000\000\000\227\000\236\000\000\000\000\000\000\000\
\000\000\232\000\233\000\235\000\000\000\240\000\000\000\000\000\
\219\000\244\000\245\000\246\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\038\000\000\000\000\000\043\000\000\000\
\000\000\129\000\000\000\000\000\138\000\144\000\000\000\000\000\
\134\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\212\000\000\000\000\000\000\000\250\000\000\000\000\000\247\000\
\225\000\237\000\000\000\000\000\000\000\234\000\000\000\241\000\
\000\000\000\000\000\000\000\000\017\000\000\000\035\000\037\000\
\040\000\042\000\023\000\000\000\142\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\204\000\203\000\000\000\000\000\
\000\000\000\000\000\000\185\000\000\000\000\000\000\000\201\000\
\000\000\000\000\228\000\229\000\000\000\226\000\000\000\014\000\
\000\000\000\000\001\000\000\000\000\000\136\000\104\000\000\000\
\000\000\178\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\199\000\000\000\230\000\000\000\242\000\000\000\
\000\000\034\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\177\000\000\000\000\000\231\000\000\000\
\000\000\135\000\103\000\184\000\000\000\000\000\180\000\188\000\
\000\000\181\000\202\000\000\000\000\000\179\000\000\000\000\000\
\000\000\000\000\186\000\000\000\000\000\016\000\182\000\000\000\
\000\000\015\000"

let yydgoto = "\007\000\
\027\000\028\000\035\000\039\000\121\000\057\000\012\001\031\002\
\062\000\214\000\074\000\013\001\080\000\166\000\036\002\032\002\
\083\000\189\000\093\000\094\000\155\001\244\001\246\001\191\002\
\069\002\070\002\072\002\073\002\061\001\165\001\166\001\190\000\
\191\000\063\000\122\000\103\000\247\000\054\000\225\000\226\000\
\079\001\080\001\094\002\104\000\248\000\106\000\107\000\123\000\
\216\000\070\001\177\001\004\002\172\001\180\001\173\001\227\000\
\075\000\022\001\076\000\169\002\238\002\239\002\167\000\168\000\
\171\002\109\002\077\000\037\002\115\002\108\000\109\000\058\000\
\059\000\060\000\236\000\237\000\040\000\041\000\118\000"

let yysindex = "\193\004\
\072\003\072\003\182\255\065\255\014\003\085\255\000\000\073\255\
\107\255\175\255\229\255\050\000\069\000\076\255\175\255\075\000\
\084\000\093\000\174\000\199\000\229\000\002\001\023\255\112\255\
\014\001\019\001\000\000\200\255\000\000\037\255\228\002\021\001\
\247\255\029\001\000\000\197\255\043\255\000\000\000\000\127\000\
\000\000\121\000\014\003\071\255\228\002\044\001\247\255\033\001\
\037\001\217\000\048\001\053\001\247\001\193\000\234\000\024\001\
\000\000\028\001\189\000\073\001\070\001\078\001\000\000\093\001\
\096\001\044\001\067\001\044\001\077\001\003\000\094\001\099\001\
\014\003\074\001\114\001\110\001\000\000\112\001\116\001\190\000\
\102\001\058\001\019\255\151\255\120\001\127\001\128\001\047\255\
\123\001\129\001\131\001\141\001\121\001\146\001\152\001\250\255\
\213\002\155\001\159\001\249\002\168\001\247\001\156\001\000\000\
\157\001\154\001\000\000\000\000\160\001\247\255\130\255\014\003\
\158\001\175\001\014\003\115\000\170\001\000\000\173\001\000\000\
\205\255\184\001\000\000\014\003\014\003\182\001\180\001\175\255\
\021\001\172\001\114\000\000\000\191\001\211\001\212\001\014\003\
\014\003\014\003\014\003\014\003\206\001\210\001\210\001\214\001\
\085\255\217\001\014\003\175\255\175\255\189\001\072\003\198\001\
\213\002\221\001\233\001\201\001\201\001\218\002\072\003\076\255\
\190\001\235\001\236\001\245\001\246\001\226\001\252\001\002\002\
\124\000\014\002\073\255\011\002\175\255\072\003\175\255\175\255\
\175\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\215\001\047\255\018\002\003\002\
\007\002\009\002\013\002\072\003\112\255\175\255\073\255\014\003\
\213\002\089\255\000\000\025\002\228\002\044\001\247\255\029\002\
\000\000\031\002\029\255\042\002\043\002\019\000\250\001\213\002\
\000\000\000\000\055\002\056\002\000\000\077\002\228\002\021\001\
\044\002\060\002\000\000\247\255\079\002\210\255\014\003\014\003\
\247\001\027\002\034\002\053\002\064\002\083\002\000\000\014\003\
\000\000\098\002\097\002\099\002\014\003\111\002\091\002\102\002\
\108\002\014\003\014\003\014\003\116\002\247\255\014\003\109\002\
\000\000\077\000\247\001\075\002\000\000\000\000\000\000\000\000\
\000\000\135\002\144\003\134\002\000\000\000\000\072\003\000\000\
\072\003\191\255\139\002\150\002\175\255\000\000\000\000\014\003\
\000\000\000\000\014\003\122\002\154\002\155\002\143\002\074\003\
\190\000\162\002\147\002\157\002\184\002\185\002\014\003\192\002\
\000\000\194\002\196\002\198\002\072\003\000\000\047\255\042\001\
\193\002\195\002\201\002\000\000\000\000\199\002\216\002\146\003\
\023\000\247\255\207\002\219\002\156\002\210\002\221\002\021\001\
\212\002\120\000\000\000\014\003\000\000\226\002\234\002\241\002\
\213\002\000\000\014\003\240\002\000\000\245\002\251\002\250\002\
\000\003\242\002\000\000\247\255\000\000\002\003\000\000\203\255\
\003\003\255\002\008\003\000\000\000\000\000\000\000\000\000\000\
\014\003\125\002\000\000\014\003\021\001\228\002\027\001\015\003\
\247\001\014\003\017\003\021\003\014\003\073\255\072\003\254\002\
\000\000\000\000\072\003\155\002\155\002\000\000\247\001\090\003\
\072\003\000\000\029\003\025\003\074\003\027\003\038\003\000\000\
\000\000\039\003\040\003\043\003\055\003\050\003\000\000\058\003\
\059\003\061\003\228\000\000\000\060\003\072\003\072\003\093\000\
\001\003\073\002\041\003\065\003\009\003\047\003\000\000\000\000\
\000\000\000\000\077\003\000\000\083\003\000\000\057\003\067\003\
\072\003\000\000\088\003\112\000\087\003\105\003\100\003\000\000\
\099\003\213\002\094\003\101\003\098\003\014\003\014\003\213\002\
\000\000\122\003\213\002\000\000\247\255\014\003\000\000\123\002\
\014\003\056\002\092\003\021\001\000\000\000\000\000\000\000\000\
\000\000\137\003\138\003\247\001\014\003\247\001\000\000\123\003\
\014\003\156\003\141\003\015\255\157\003\247\001\000\000\000\000\
\072\003\000\000\000\000\000\000\014\003\000\000\147\003\139\003\
\218\255\159\003\074\003\064\001\014\003\055\000\074\003\000\000\
\167\003\171\003\176\003\147\003\074\003\074\003\074\003\074\003\
\000\000\000\000\000\000\000\000\164\003\160\003\072\003\191\003\
\072\003\072\003\193\003\000\000\194\003\000\000\072\003\014\003\
\000\000\140\003\195\003\196\003\000\000\207\002\000\000\192\003\
\181\255\228\002\213\002\000\000\021\001\124\001\205\003\240\002\
\133\003\240\002\207\003\208\003\213\002\209\003\000\000\012\003\
\000\000\203\003\202\003\247\001\014\003\124\003\014\003\000\000\
\014\003\014\003\014\003\000\000\247\001\146\000\211\003\149\003\
\145\000\000\000\000\000\123\255\214\003\175\255\210\003\217\003\
\216\003\219\003\212\003\215\003\116\000\222\003\223\003\224\003\
\220\003\101\002\175\255\217\003\225\003\227\003\228\003\229\003\
\190\000\000\000\000\000\016\001\016\001\014\003\074\003\000\000\
\044\001\158\003\000\000\197\003\226\003\230\003\213\003\231\003\
\232\003\000\000\155\003\213\002\000\000\000\000\000\000\213\002\
\000\000\233\003\240\002\000\000\213\002\100\003\226\002\050\255\
\100\003\240\002\000\000\237\003\247\001\204\003\000\000\000\000\
\247\001\014\003\247\001\161\001\134\003\247\001\235\003\234\003\
\067\255\190\000\033\255\000\000\000\000\074\003\000\000\239\003\
\238\003\074\003\241\003\000\000\000\000\243\003\217\003\175\255\
\217\003\000\000\000\000\000\000\244\003\000\000\245\003\246\003\
\000\000\000\000\000\000\000\000\221\003\104\002\006\003\236\003\
\072\003\247\003\193\003\000\000\248\003\194\003\000\000\072\003\
\240\002\000\000\213\002\181\255\000\000\000\000\014\003\213\002\
\000\000\056\002\014\003\247\001\014\003\014\003\044\001\249\003\
\067\255\058\255\228\002\044\001\247\255\242\003\251\003\187\003\
\000\000\250\003\000\004\252\003\000\000\217\003\001\004\000\000\
\000\000\000\000\003\004\004\004\005\004\000\000\217\003\000\000\
\072\003\240\003\198\003\072\003\000\000\008\004\000\000\000\000\
\000\000\000\000\000\000\240\002\000\000\178\001\181\255\169\000\
\200\003\247\001\136\003\247\001\000\000\000\000\010\004\006\004\
\253\003\021\001\254\003\000\000\014\003\014\003\190\000\000\000\
\044\001\013\004\000\000\000\000\217\003\000\000\014\004\000\000\
\074\003\016\004\000\000\247\003\213\002\000\000\000\000\056\002\
\014\003\000\000\012\004\067\255\255\003\009\004\002\004\014\003\
\032\003\152\002\000\000\017\004\000\000\020\004\000\000\145\003\
\014\003\000\000\181\255\023\004\247\001\067\255\011\004\228\002\
\067\255\021\001\228\001\000\000\067\255\145\000\000\000\218\003\
\079\003\000\000\000\000\000\000\067\255\018\004\000\000\000\000\
\067\255\000\000\000\000\026\004\007\004\000\000\067\255\015\004\
\014\003\072\003\000\000\067\255\086\003\000\000\000\000\019\004\
\072\003\000\000"

let yyrindex = "\000\000\
\021\004\030\005\000\000\031\005\000\000\000\000\000\000\027\004\
\000\000\000\000\000\000\000\000\000\000\029\004\000\000\024\004\
\000\000\030\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\022\004\000\000\025\004\
\000\000\000\000\000\000\000\000\024\000\000\000\000\000\039\005\
\000\000\040\005\038\004\043\000\000\000\082\000\000\000\000\000\
\000\000\000\000\000\000\000\000\042\005\000\000\032\000\000\000\
\000\000\009\000\000\000\043\005\000\000\000\000\000\000\000\000\
\209\002\028\004\000\000\028\004\000\000\000\000\000\000\000\000\
\000\000\000\000\030\004\000\000\000\000\000\000\207\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\031\004\000\000\000\000\
\000\000\000\000\000\000\038\004\000\000\032\004\000\000\000\000\
\000\000\000\000\000\000\000\000\044\005\042\004\116\255\000\000\
\000\000\047\005\000\000\000\000\024\000\000\000\000\000\000\000\
\181\000\000\000\000\000\038\004\043\004\000\000\000\000\000\000\
\025\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\049\004\000\000\000\000\006\000\000\000\
\000\000\000\000\000\000\041\255\041\255\000\000\006\000\029\004\
\000\000\000\000\000\000\000\000\000\000\000\000\162\255\144\255\
\000\000\000\000\027\004\000\000\049\004\006\000\049\004\049\004\
\049\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\027\255\033\004\000\000\
\000\000\000\000\000\000\006\000\000\000\000\000\050\004\000\000\
\000\000\021\000\000\000\000\000\000\000\082\000\000\000\000\000\
\000\000\000\000\125\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\025\004\
\051\004\000\000\000\000\042\004\000\000\197\000\000\000\038\004\
\055\005\000\000\000\000\015\000\016\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\039\004\
\000\000\000\000\038\004\000\000\143\000\042\004\038\004\245\000\
\000\000\038\001\106\001\000\000\000\000\000\000\000\000\000\000\
\000\000\215\000\000\000\000\000\000\000\000\000\006\000\000\000\
\006\000\000\000\221\000\246\000\100\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\053\004\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\042\004\000\000\000\000\000\000\000\000\000\000\025\004\
\000\000\059\000\000\000\038\004\000\000\067\000\000\000\000\000\
\000\000\000\000\000\000\068\000\000\000\062\255\038\255\000\000\
\037\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\025\004\000\000\000\000\000\000\
\138\001\038\004\000\000\000\000\000\000\000\000\006\000\000\000\
\000\000\000\000\006\000\000\000\000\000\000\000\129\255\000\000\
\006\000\000\000\000\000\000\000\000\000\000\000\231\001\000\000\
\000\000\004\002\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\006\000\006\000\030\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\228\255\000\000\237\255\000\000\000\000\000\000\
\006\000\000\000\000\000\000\000\000\000\055\004\059\000\000\000\
\000\000\000\000\000\000\165\000\170\000\000\000\038\004\000\000\
\000\000\000\000\000\000\000\000\042\004\038\004\000\000\133\000\
\043\004\000\000\185\255\000\000\000\000\000\000\000\000\000\000\
\000\000\038\000\061\000\187\001\000\000\036\002\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\054\002\000\000\000\000\
\006\000\000\000\000\000\000\000\000\000\000\000\034\004\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\222\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\006\000\000\000\
\035\004\006\000\000\000\000\000\000\000\000\000\006\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\092\000\000\000\000\000\000\000\025\004\159\000\000\000\186\000\
\125\000\192\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\063\002\000\000\203\002\000\000\000\000\
\000\000\000\000\000\000\000\000\180\255\000\000\051\255\000\000\
\000\000\000\000\000\000\060\004\000\000\049\004\000\000\061\004\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\049\004\061\004\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\209\255\046\001\000\000\000\000\000\000\
\028\004\000\000\000\000\000\000\062\004\000\000\000\000\063\004\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\216\000\000\000\000\000\059\000\067\000\000\000\
\059\000\223\000\000\000\000\000\013\000\017\000\000\000\000\000\
\212\000\000\000\072\002\000\000\000\000\114\002\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\061\004\049\004\
\061\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\006\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\
\224\000\000\000\000\000\092\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\149\002\000\000\000\000\075\255\000\000\
\000\000\022\004\000\000\082\000\000\000\000\000\000\000\000\000\
\000\000\066\004\000\000\000\000\000\000\061\004\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\061\004\000\000\
\006\000\000\000\000\000\006\000\000\000\252\000\000\000\000\000\
\000\000\000\000\000\000\001\001\000\000\000\000\092\000\036\004\
\000\000\039\000\000\000\167\002\000\000\000\000\000\000\000\000\
\000\000\025\004\000\000\000\000\000\000\000\000\000\000\000\000\
\058\004\000\000\000\000\000\000\061\004\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\048\004\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\092\000\000\000\176\002\000\000\000\000\000\000\
\000\000\025\004\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\205\001\
\000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\
\006\000\000\000"

let yygindex = "\000\000\
\000\000\254\255\000\000\000\000\008\000\181\004\091\255\213\255\
\221\255\117\255\167\004\007\000\000\000\253\254\244\254\102\003\
\184\003\040\004\132\004\000\000\000\000\000\000\000\000\103\002\
\000\000\197\002\000\000\190\002\000\000\080\003\000\000\000\000\
\143\004\041\004\178\255\212\255\044\004\255\255\227\255\056\255\
\139\253\096\254\000\000\235\004\000\000\132\255\150\003\097\004\
\000\000\075\003\118\254\026\254\078\003\004\003\000\000\045\004\
\000\000\184\004\056\004\226\255\086\002\000\000\000\000\230\253\
\130\002\087\002\233\000\066\254\244\253\124\004\000\000\000\000\
\195\001\000\000\076\003\081\003\000\000\232\004\092\005"

let yytablesize = 1431
let yytable = "\029\000\
\127\000\036\000\129\000\113\000\249\000\024\000\108\002\040\001\
\008\001\042\001\043\001\044\001\053\000\018\001\017\001\019\001\
\066\000\130\000\074\001\139\001\128\000\078\000\150\000\023\001\
\152\000\015\002\081\002\086\001\255\001\140\001\068\001\005\001\
\053\002\062\000\030\001\025\002\200\002\013\001\102\000\128\002\
\101\000\175\000\080\000\171\000\098\000\242\000\243\000\178\000\
\179\000\180\000\116\000\117\000\102\000\107\001\196\000\181\000\
\182\000\183\000\153\000\205\000\015\001\057\001\100\000\205\000\
\100\000\098\000\155\000\126\000\161\002\184\000\151\002\175\000\
\124\000\037\000\125\000\162\002\076\001\185\000\098\000\170\002\
\158\000\061\000\163\002\067\000\070\000\164\002\026\002\067\000\
\172\000\186\000\058\001\157\000\059\001\055\000\187\000\215\000\
\098\000\088\000\165\002\196\000\069\000\172\002\062\000\101\000\
\069\001\099\000\179\002\038\000\181\002\071\000\072\000\118\001\
\217\001\163\001\252\002\064\000\160\000\205\000\160\000\230\000\
\166\002\152\002\233\000\110\002\125\000\073\000\208\002\100\000\
\188\000\174\000\069\000\228\000\139\000\056\000\246\000\038\001\
\167\002\229\000\160\000\126\000\089\000\067\000\078\000\000\001\
\001\001\002\001\003\001\004\001\016\001\194\000\090\000\215\000\
\173\000\089\001\011\001\014\001\025\001\060\001\141\000\174\000\
\063\001\218\002\064\001\055\001\157\000\229\001\230\001\231\001\
\232\001\150\000\223\002\041\001\104\001\197\002\194\000\173\002\
\108\001\065\001\082\001\176\002\173\000\174\000\091\000\065\000\
\194\000\152\000\073\001\108\000\170\002\183\001\030\000\154\000\
\192\000\052\001\092\000\171\001\073\001\031\000\003\002\215\000\
\032\000\108\000\192\000\149\002\054\001\240\000\153\002\056\001\
\246\002\215\000\173\000\215\000\102\000\033\000\215\000\156\000\
\058\002\059\002\060\002\061\002\034\002\115\001\140\000\143\000\
\230\002\136\000\137\000\136\000\137\000\097\000\102\000\034\000\
\249\000\137\000\039\000\108\002\011\002\067\000\088\001\138\000\
\139\000\138\000\139\000\044\000\095\000\178\001\138\000\139\000\
\110\000\201\002\215\000\199\000\098\001\215\000\215\000\111\000\
\149\000\103\001\039\000\105\001\229\001\230\001\231\001\232\001\
\115\000\008\001\154\000\044\000\113\001\112\000\114\001\107\000\
\200\000\155\000\192\001\106\000\010\003\017\001\019\001\128\000\
\073\001\162\001\128\000\203\001\073\001\107\000\001\002\119\001\
\005\001\106\000\120\001\024\000\008\002\098\000\128\000\010\002\
\128\000\105\000\151\001\080\000\013\001\080\000\146\001\080\000\
\080\000\080\000\135\002\128\000\008\001\133\002\023\001\105\000\
\051\002\200\001\068\000\080\000\080\000\153\000\080\000\052\002\
\153\000\080\000\080\000\015\001\013\001\155\000\126\000\215\000\
\155\000\080\000\005\001\005\001\153\000\069\000\153\000\080\000\
\080\000\024\000\184\001\079\000\155\000\126\000\155\000\126\000\
\158\000\153\000\067\000\015\001\081\000\080\000\157\000\046\000\
\007\002\155\000\126\000\136\000\137\000\082\000\067\000\012\002\
\196\001\097\000\014\002\198\001\208\001\102\000\158\000\157\000\
\210\001\138\000\080\000\251\000\206\001\120\002\214\001\083\002\
\252\000\175\001\157\000\234\000\121\002\235\000\176\001\125\000\
\112\002\090\002\125\000\125\000\035\001\119\000\036\001\139\000\
\171\001\090\000\139\000\234\001\235\001\127\002\125\000\078\000\
\125\000\078\000\106\002\078\000\078\000\078\000\139\000\120\000\
\139\000\107\002\065\000\125\000\103\002\165\000\249\001\078\000\
\078\000\141\000\078\000\139\000\141\000\078\000\078\000\157\000\
\215\000\186\001\157\000\231\002\150\000\078\000\215\000\150\000\
\141\000\215\000\141\000\078\000\078\000\006\002\084\000\120\000\
\157\000\120\000\088\000\150\000\152\000\141\000\251\001\252\001\
\145\002\078\000\154\000\157\000\146\002\164\000\164\000\164\000\
\150\000\148\002\165\000\152\000\020\002\152\000\028\002\085\000\
\022\002\154\000\180\002\154\000\248\002\082\002\078\000\189\000\
\152\000\075\000\156\000\189\000\029\002\075\000\154\000\208\000\
\133\000\140\000\143\000\208\000\050\002\112\000\067\000\112\000\
\144\000\156\000\067\000\156\000\064\002\086\000\066\002\067\002\
\140\000\143\000\140\000\143\000\074\002\095\000\156\000\095\000\
\210\000\095\000\095\000\095\000\210\000\140\000\143\000\075\002\
\033\000\215\000\033\000\149\000\140\000\095\000\095\000\196\002\
\095\000\102\000\087\000\215\000\199\002\228\001\229\001\230\001\
\231\001\232\001\149\000\095\000\149\000\136\002\095\000\093\002\
\141\000\095\000\095\000\096\000\097\002\105\000\099\002\149\000\
\100\002\101\002\102\002\084\000\246\000\114\000\098\000\095\000\
\098\000\131\000\098\000\098\000\098\000\132\000\216\000\128\000\
\216\000\136\000\137\000\153\001\154\001\085\000\098\000\098\000\
\134\000\098\000\229\001\230\001\095\000\135\000\083\000\138\000\
\139\000\038\002\142\000\039\002\098\000\134\002\143\000\091\000\
\040\002\145\000\215\000\098\000\041\002\146\000\215\000\042\002\
\006\001\007\001\043\002\215\000\147\000\237\002\044\002\216\000\
\098\000\251\002\216\000\216\000\211\001\212\001\148\000\045\002\
\149\000\151\000\201\001\153\000\046\002\047\002\156\000\168\002\
\159\000\156\002\097\000\157\000\097\000\098\000\097\000\097\000\
\097\000\092\000\160\000\205\002\161\000\163\000\209\002\162\000\
\210\002\175\000\097\000\097\000\169\000\097\000\170\000\048\002\
\176\000\177\000\207\002\192\000\049\002\237\002\189\002\211\002\
\097\000\193\000\090\000\194\000\090\000\195\002\090\000\090\000\
\090\000\215\000\136\000\137\000\086\000\195\000\215\000\196\000\
\197\000\198\000\090\000\090\000\097\000\090\000\198\002\168\002\
\138\000\139\000\202\002\217\000\203\002\204\002\094\000\218\000\
\090\000\220\000\102\000\222\000\221\000\244\002\223\000\093\000\
\232\000\097\000\117\000\224\000\231\000\238\000\224\002\136\000\
\137\000\227\002\241\000\088\000\090\000\088\000\244\000\088\000\
\088\000\088\000\250\000\085\002\245\000\138\000\139\000\253\000\
\136\000\137\000\087\000\088\000\088\000\255\002\088\000\183\000\
\183\000\090\000\183\000\014\003\254\000\255\000\138\000\139\000\
\005\001\088\000\055\000\015\001\241\002\242\002\008\001\012\003\
\183\000\010\001\015\003\215\000\017\001\019\001\018\003\220\000\
\157\002\220\000\168\002\183\000\021\001\088\000\022\003\027\001\
\253\002\020\001\024\003\028\001\029\001\183\000\030\001\003\003\
\027\003\229\002\136\000\137\000\168\002\031\003\031\001\168\002\
\009\003\033\001\088\000\168\002\224\000\034\001\224\000\102\000\
\138\000\139\000\032\001\168\002\039\001\136\000\137\000\168\002\
\220\000\220\000\220\000\220\000\220\000\168\002\037\001\030\003\
\047\001\048\001\168\002\138\000\139\000\049\001\034\003\050\001\
\029\003\062\001\045\001\051\001\084\000\066\001\084\000\067\001\
\084\000\084\000\084\000\017\003\084\001\224\000\224\000\224\000\
\224\000\224\000\071\001\072\001\084\000\084\000\085\000\084\000\
\085\000\077\001\085\000\085\000\085\000\075\001\085\001\083\000\
\078\001\083\000\084\000\083\000\083\000\083\000\085\000\085\000\
\091\000\085\000\091\000\238\001\091\000\091\000\091\000\083\000\
\083\000\109\001\083\000\092\001\085\000\081\001\084\000\087\001\
\091\000\091\000\116\000\091\000\090\001\083\000\093\001\136\000\
\137\000\136\000\137\000\091\001\095\001\096\001\091\000\126\002\
\085\000\097\001\186\002\084\000\100\001\138\000\139\000\138\000\
\139\000\083\000\092\000\099\001\092\000\106\001\092\000\092\000\
\092\000\101\001\091\000\136\000\137\000\085\000\136\000\137\000\
\102\001\013\002\092\000\092\000\137\000\092\000\083\000\110\001\
\112\001\138\000\139\000\116\001\138\000\139\000\197\001\091\000\
\092\000\136\000\137\000\136\000\137\000\086\000\117\001\086\000\
\121\001\086\000\086\000\086\000\122\001\124\001\005\003\138\000\
\139\000\138\000\139\000\070\000\092\000\086\000\086\000\094\000\
\086\000\094\000\141\001\094\000\094\000\094\000\136\000\137\000\
\093\000\142\001\093\000\086\000\093\000\093\000\093\000\094\000\
\094\000\092\000\094\000\143\001\138\000\139\000\144\001\145\001\
\093\000\093\000\147\001\093\000\148\001\094\000\149\001\086\000\
\150\001\159\001\156\001\087\000\157\001\087\000\093\000\087\000\
\087\000\087\000\158\001\071\000\071\000\071\000\201\000\164\001\
\071\000\094\000\160\001\087\000\086\000\202\000\087\000\203\000\
\169\001\204\000\093\000\167\001\205\000\100\000\168\001\206\000\
\179\001\087\000\174\001\181\001\044\000\170\001\094\000\071\000\
\136\000\137\000\182\001\045\000\207\000\073\001\046\000\093\000\
\185\001\101\000\043\000\186\001\187\001\087\000\138\000\139\000\
\188\001\044\000\189\001\047\000\191\001\193\001\208\000\194\001\
\045\000\209\000\210\000\046\000\024\001\043\000\101\000\043\000\
\195\001\202\001\087\000\204\001\044\000\048\000\044\000\205\001\
\047\000\049\000\211\000\045\000\209\001\045\000\046\000\215\001\
\046\000\216\001\004\003\218\001\050\000\212\000\213\000\219\001\
\220\001\221\001\048\000\047\000\222\001\047\000\049\000\187\002\
\229\001\230\001\231\001\232\001\051\000\052\000\136\000\137\000\
\223\001\050\000\224\001\225\001\226\001\048\000\227\001\048\000\
\233\001\049\000\092\002\049\000\138\000\139\000\237\001\239\001\
\240\001\051\000\052\000\125\001\050\000\242\001\050\000\126\001\
\243\001\021\003\127\001\241\001\128\001\129\001\245\001\247\001\
\032\003\248\001\250\001\253\001\051\000\052\000\051\000\052\000\
\008\000\009\000\010\000\011\000\012\000\136\000\137\000\013\000\
\014\000\254\001\176\001\000\002\136\000\137\000\015\000\016\000\
\136\000\137\000\002\002\138\000\139\000\005\002\003\002\017\000\
\018\000\019\000\138\000\139\000\009\002\130\001\138\000\139\000\
\016\002\131\001\132\001\133\001\134\001\135\001\136\001\137\001\
\138\001\018\002\019\002\021\002\213\001\098\002\020\000\024\002\
\021\000\022\000\136\000\137\000\023\000\024\000\030\002\158\002\
\033\002\233\002\025\000\026\000\136\000\137\000\136\000\137\000\
\138\000\139\000\023\002\027\002\035\002\062\002\136\000\137\000\
\136\000\137\000\138\000\139\000\138\000\139\000\111\001\054\002\
\161\001\136\000\137\000\055\002\138\000\139\000\138\000\139\000\
\056\002\144\002\008\003\229\001\230\001\231\001\232\001\138\000\
\139\000\001\000\002\000\003\000\004\000\005\000\006\000\065\002\
\063\002\068\002\071\002\077\002\078\002\080\002\076\002\086\002\
\069\001\088\002\089\002\234\000\235\000\091\002\104\002\105\002\
\111\002\114\002\116\002\138\002\113\002\117\002\118\002\119\002\
\122\002\123\002\124\002\129\002\125\002\130\002\131\002\132\002\
\139\002\137\002\140\002\141\002\143\002\142\002\154\002\159\002\
\155\002\174\002\175\002\177\002\160\002\178\002\182\002\183\002\
\184\002\147\002\212\002\185\002\213\002\206\002\214\002\215\002\
\190\002\193\002\216\002\219\002\217\002\220\002\221\002\222\002\
\228\002\232\002\188\002\226\002\234\002\236\002\235\002\245\002\
\247\002\249\002\254\002\000\003\240\002\002\003\007\003\006\003\
\225\002\011\003\001\003\025\003\013\003\024\000\025\001\020\003\
\028\003\073\000\023\003\206\000\191\000\026\003\021\001\027\001\
\122\000\034\001\011\001\003\001\168\000\118\000\254\000\122\000\
\110\000\033\003\024\000\069\000\073\000\166\000\000\001\206\000\
\113\000\115\000\067\000\047\000\169\000\025\000\249\000\248\000\
\067\000\187\000\036\000\041\000\198\000\009\001\026\001\236\001\
\053\001\057\002\250\002\194\002\046\001\079\002\219\000\192\002\
\094\001\017\002\084\002\087\002\023\001\123\001\152\001\016\003\
\243\002\158\000\150\002\083\001\019\003\095\002\239\000\042\000\
\000\000\000\000\000\000\096\002\067\000\101\000\000\000\000\000\
\000\000\000\000\000\000\000\000\064\000\000\000\024\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\190\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\199\001\000\000\000\000\000\000\000\000\000\000\207\001"

let yycheck = "\002\000\
\045\000\003\000\046\000\033\000\129\000\000\000\033\002\173\000\
\000\000\175\000\176\000\177\000\005\000\153\000\000\000\000\000\
\010\000\047\000\000\000\032\001\000\000\015\000\066\000\000\000\
\068\000\186\001\001\002\228\000\167\001\033\001\002\001\000\000\
\223\001\007\001\002\001\021\001\154\002\000\000\031\000\052\002\
\003\001\001\001\000\000\025\001\008\001\124\000\125\000\001\001\
\002\001\003\001\008\001\009\001\045\000\254\000\025\001\009\001\
\010\001\011\001\000\000\009\001\000\000\201\000\001\001\013\001\
\003\001\008\001\000\000\000\000\002\001\023\001\021\001\031\001\
\002\001\009\001\004\001\009\001\216\000\031\001\008\001\106\002\
\073\000\009\001\016\001\009\001\009\001\019\001\072\001\013\001\
\070\001\043\001\002\001\000\000\004\001\009\001\048\001\097\000\
\008\001\075\001\032\001\070\001\001\001\069\001\076\001\066\001\
\076\001\069\001\119\002\043\001\121\002\034\001\035\001\021\001\
\125\001\058\001\232\002\009\001\001\001\067\001\003\001\112\000\
\054\001\072\001\115\000\001\001\000\000\050\001\069\001\066\001\
\082\001\001\001\031\001\002\001\000\000\049\001\128\000\171\000\
\070\001\008\001\023\001\069\001\029\001\067\001\000\000\136\000\
\137\000\138\000\139\000\140\000\151\000\006\001\039\001\153\000\
\002\001\232\000\147\000\149\000\159\000\069\001\000\000\031\001\
\205\000\174\002\206\000\199\000\000\000\043\001\044\001\045\001\
\046\001\000\000\183\002\174\000\251\000\148\002\031\001\110\002\
\255\000\207\000\223\000\114\002\001\001\031\001\071\001\009\001\
\041\001\000\000\006\001\003\001\215\002\073\001\009\001\000\000\
\031\001\196\000\083\001\064\001\006\001\016\001\018\001\201\000\
\019\001\017\001\041\001\086\002\198\000\001\001\089\002\200\000\
\221\002\001\001\031\001\003\001\205\000\032\001\216\000\000\000\
\229\001\230\001\231\001\232\001\003\001\031\001\000\000\000\000\
\199\002\023\001\024\001\023\001\024\001\030\001\223\000\050\001\
\101\001\024\001\007\001\006\003\181\001\009\001\231\000\037\001\
\038\001\037\001\038\001\007\001\000\000\068\001\037\001\038\001\
\002\001\154\002\042\001\002\001\245\000\045\001\046\001\009\001\
\000\000\250\000\031\001\252\000\043\001\044\001\045\001\046\001\
\068\001\001\001\008\001\031\001\015\001\023\001\017\001\003\001\
\023\001\015\001\072\001\003\001\251\002\007\001\007\001\003\001\
\006\001\003\001\006\001\106\001\006\001\017\001\170\001\024\001\
\001\001\017\001\027\001\030\001\176\001\000\000\018\001\179\001\
\020\001\003\001\045\001\001\001\007\001\003\001\039\001\005\001\
\006\001\007\001\063\002\031\001\044\001\057\002\031\001\017\001\
\002\001\102\001\009\001\017\001\018\001\003\001\020\001\009\001\
\006\001\023\001\024\001\007\001\031\001\003\001\003\001\073\001\
\006\001\031\001\043\001\044\001\018\001\009\001\020\001\037\001\
\038\001\076\001\075\001\009\001\018\001\018\001\020\001\020\001\
\068\001\031\001\009\001\031\001\009\001\051\001\003\001\075\001\
\175\001\031\001\031\001\023\001\024\001\009\001\021\001\182\001\
\097\001\000\000\185\001\100\001\111\001\102\001\068\001\020\001\
\115\001\037\001\072\001\002\001\109\001\002\001\121\001\003\002\
\007\001\002\001\031\001\009\001\009\001\011\001\007\001\003\001\
\038\002\013\002\006\001\007\001\009\001\007\001\011\001\003\001\
\005\002\000\000\006\001\142\001\143\001\051\002\018\001\001\001\
\020\001\003\001\002\001\005\001\006\001\007\001\018\001\031\001\
\020\001\009\001\009\001\031\001\011\001\013\001\161\001\017\001\
\018\001\003\001\020\001\031\001\006\001\023\001\024\001\003\001\
\170\001\001\001\006\001\003\001\003\001\031\001\176\001\006\001\
\018\001\179\001\020\001\037\001\038\001\174\001\009\001\003\001\
\020\001\005\001\000\000\018\001\003\001\031\001\079\001\080\001\
\076\002\051\001\003\001\031\001\080\002\001\001\009\001\003\001\
\031\001\085\002\013\001\018\001\197\001\020\001\209\001\009\001\
\201\001\018\001\120\002\020\001\225\002\002\002\072\001\009\001\
\031\001\003\001\003\001\013\001\213\001\007\001\031\001\003\001\
\008\001\003\001\003\001\007\001\221\001\018\001\009\001\020\001\
\044\001\018\001\013\001\020\001\239\001\009\001\241\001\242\001\
\018\001\018\001\020\001\020\001\247\001\001\001\031\001\003\001\
\003\001\005\001\006\001\007\001\007\001\031\001\031\001\248\001\
\005\001\003\002\007\001\003\001\068\001\017\001\018\001\147\002\
\020\001\002\002\009\001\013\002\152\002\042\001\043\001\044\001\
\045\001\046\001\018\001\031\001\020\001\065\002\009\001\016\002\
\047\001\037\001\038\001\009\001\021\002\009\001\023\002\031\001\
\025\002\026\002\027\002\000\000\030\002\009\001\001\001\051\001\
\003\001\009\001\005\001\006\001\007\001\009\001\001\001\004\001\
\003\001\023\001\024\001\010\001\011\001\000\000\017\001\018\001\
\009\001\020\001\043\001\044\001\072\001\009\001\000\000\037\001\
\038\001\002\001\043\001\004\001\031\001\062\002\043\001\000\000\
\009\001\001\001\076\002\038\001\013\001\008\001\080\002\016\001\
\142\000\143\000\019\001\085\002\007\001\210\002\023\001\042\001\
\051\001\229\002\045\001\046\001\116\001\117\001\002\001\032\001\
\001\001\031\001\072\001\023\001\037\001\038\001\009\001\105\002\
\031\001\098\002\001\001\009\001\003\001\072\001\005\001\006\001\
\007\001\000\000\001\001\159\002\007\001\002\001\163\002\008\001\
\164\002\002\001\017\001\018\001\023\001\020\001\069\001\064\001\
\002\001\002\001\161\002\009\001\069\001\002\003\137\002\165\002\
\031\001\009\001\001\001\009\001\003\001\144\002\005\001\006\001\
\007\001\147\002\023\001\024\001\000\000\009\001\152\002\031\001\
\007\001\002\001\017\001\018\001\051\001\020\001\151\002\161\002\
\037\001\038\001\155\002\009\001\157\002\158\002\000\000\009\001\
\031\001\002\001\163\002\015\001\017\001\217\002\021\001\000\000\
\002\001\072\001\009\001\020\001\023\001\009\001\185\002\023\001\
\024\001\188\002\003\001\001\001\051\001\003\001\009\001\005\001\
\006\001\007\001\023\001\072\001\017\001\037\001\038\001\009\001\
\023\001\024\001\000\000\017\001\018\001\236\002\020\001\003\001\
\004\001\072\001\006\001\000\003\002\001\002\001\037\001\038\001\
\011\001\031\001\009\001\031\001\213\002\214\002\009\001\254\002\
\020\001\009\001\001\003\229\002\031\001\009\001\005\003\001\001\
\072\001\003\001\236\002\031\001\036\001\051\001\013\003\050\001\
\233\002\009\001\017\003\009\001\009\001\041\001\002\001\240\002\
\023\003\072\001\023\001\024\001\254\002\028\003\009\001\001\003\
\249\002\006\001\072\001\005\003\001\001\004\001\003\001\000\003\
\037\001\038\001\041\001\013\003\002\001\023\001\024\001\017\003\
\042\001\043\001\044\001\045\001\046\001\023\003\009\001\026\003\
\007\001\023\001\028\003\037\001\038\001\023\001\033\003\023\001\
\025\003\009\001\076\001\023\001\001\001\009\001\003\001\009\001\
\005\001\006\001\007\001\072\001\001\001\042\001\043\001\044\001\
\045\001\046\001\009\001\009\001\017\001\018\001\001\001\020\001\
\003\001\003\001\005\001\006\001\007\001\068\001\003\001\001\001\
\009\001\003\001\031\001\005\001\006\001\007\001\017\001\018\001\
\001\001\020\001\003\001\003\001\005\001\006\001\007\001\017\001\
\018\001\007\001\020\001\031\001\031\001\009\001\051\001\009\001\
\017\001\018\001\008\001\020\001\066\001\031\001\031\001\023\001\
\024\001\023\001\024\001\066\001\003\001\005\001\031\001\003\001\
\051\001\007\001\003\001\072\001\018\001\037\001\038\001\037\001\
\038\001\051\001\001\001\005\001\003\001\002\001\005\001\006\001\
\007\001\020\001\051\001\023\001\024\001\072\001\023\001\024\001\
\021\001\007\001\017\001\018\001\024\001\020\001\072\001\001\001\
\003\001\037\001\038\001\001\001\037\001\038\001\018\001\072\001\
\031\001\023\001\024\001\023\001\024\001\001\001\001\001\003\001\
\031\001\005\001\006\001\007\001\003\001\015\001\007\001\037\001\
\038\001\037\001\038\001\009\001\051\001\017\001\018\001\001\001\
\020\001\003\001\009\001\005\001\006\001\007\001\023\001\024\001\
\001\001\031\001\003\001\031\001\005\001\006\001\007\001\017\001\
\018\001\072\001\020\001\031\001\037\001\038\001\007\001\007\001\
\017\001\018\001\003\001\020\001\003\001\031\001\003\001\051\001\
\003\001\003\001\010\001\001\001\010\001\003\001\031\001\005\001\
\006\001\007\001\010\001\003\001\004\001\005\001\002\001\009\001\
\008\001\051\001\003\001\017\001\072\001\009\001\020\001\011\001\
\015\001\013\001\051\001\009\001\016\001\002\001\075\001\019\001\
\007\001\031\001\023\001\002\001\009\001\017\001\072\001\031\001\
\023\001\024\001\002\001\016\001\032\001\006\001\019\001\072\001\
\004\001\022\001\002\001\001\001\003\001\051\001\037\001\038\001\
\001\001\009\001\017\001\032\001\003\001\003\001\050\001\009\001\
\016\001\053\001\054\001\019\001\051\001\002\001\022\001\002\001\
\009\001\003\001\072\001\003\001\009\001\050\001\009\001\003\001\
\032\001\054\001\070\001\016\001\031\001\016\001\019\001\003\001\
\019\001\009\001\003\001\009\001\065\001\081\001\082\001\002\001\
\002\001\002\001\050\001\032\001\002\001\032\001\054\001\042\001\
\043\001\044\001\045\001\046\001\081\001\082\001\023\001\024\001\
\002\001\065\001\009\001\002\001\002\001\050\001\002\001\050\001\
\005\001\054\001\055\001\054\001\037\001\038\001\070\001\031\001\
\008\001\081\001\082\001\002\001\065\001\031\001\065\001\006\001\
\004\001\003\001\009\001\075\001\011\001\012\001\004\001\031\001\
\003\001\023\001\003\001\005\001\081\001\082\001\081\001\082\001\
\025\001\026\001\027\001\028\001\029\001\023\001\024\001\032\001\
\033\001\001\001\007\001\009\001\023\001\024\001\039\001\040\001\
\023\001\024\001\021\001\037\001\038\001\020\001\018\001\048\001\
\049\001\050\001\037\001\038\001\003\001\052\001\037\001\038\001\
\037\001\056\001\057\001\058\001\059\001\060\001\061\001\062\001\
\063\001\001\001\001\001\017\001\051\001\018\001\071\001\003\001\
\073\001\074\001\023\001\024\001\077\001\078\001\004\001\018\001\
\014\001\018\001\083\001\084\001\023\001\024\001\023\001\024\001\
\037\001\038\001\007\001\007\001\006\001\002\001\023\001\024\001\
\023\001\024\001\037\001\038\001\037\001\038\001\031\001\009\001\
\031\001\023\001\024\001\009\001\037\001\038\001\037\001\038\001\
\009\001\031\001\042\001\043\001\044\001\045\001\046\001\037\001\
\038\001\001\000\002\000\003\000\004\000\005\000\006\000\009\001\
\041\001\009\001\009\001\009\001\009\001\014\001\067\001\003\001\
\076\001\003\001\003\001\009\001\011\001\005\001\004\001\067\001\
\003\001\001\001\003\001\023\001\011\001\003\001\011\001\009\001\
\003\001\003\001\003\001\003\001\009\001\003\001\003\001\003\001\
\007\001\076\001\005\001\023\001\005\001\007\001\002\001\005\001\
\037\001\003\001\005\001\003\001\011\001\003\001\003\001\003\001\
\003\001\017\001\009\001\031\001\002\001\005\001\068\001\006\001\
\010\001\010\001\003\001\003\001\009\001\003\001\003\001\003\001\
\001\001\066\001\031\001\070\001\003\001\017\001\009\001\003\001\
\003\001\002\001\007\001\021\001\023\001\020\001\003\001\007\001\
\041\001\003\001\018\001\002\001\018\001\000\000\000\000\070\001\
\018\001\007\001\017\001\007\001\013\001\031\001\000\000\000\000\
\003\001\000\000\000\000\000\000\003\001\021\001\000\000\005\001\
\017\001\031\001\030\001\003\001\003\001\003\001\000\000\003\001\
\018\001\021\001\031\001\005\001\031\001\031\001\003\001\003\001\
\007\001\018\001\005\001\005\001\003\001\145\000\160\000\144\001\
\197\000\228\001\228\002\142\002\190\000\254\001\100\000\139\002\
\240\000\188\001\005\002\009\002\157\000\030\001\047\001\002\003\
\215\002\068\001\087\002\224\000\006\003\018\002\119\000\004\000\
\255\255\255\255\255\255\019\002\067\001\066\001\255\255\255\255\
\255\255\255\255\255\255\255\255\076\001\255\255\076\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\084\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\101\001\255\255\255\255\255\255\255\255\255\255\110\001"

let yynames_const = "\
  COMMA\000\
  LPAREN\000\
  RPAREN\000\
  LBRACKET\000\
  RBRACKET\000\
  BAR\000\
  SEMI\000\
  COLON\000\
  FOREACH\000\
  DO\000\
  LEQ\000\
  IF\000\
  THEN\000\
  ELSE\000\
  FIND\000\
  ORFIND\000\
  SUCHTHAT\000\
  DEFINED\000\
  EQUAL\000\
  DIFF\000\
  FORALL\000\
  EQUATION\000\
  PARAM\000\
  PROBA\000\
  TYPE\000\
  PROCESS\000\
  DOT\000\
  EOF\000\
  LET\000\
  QUERY\000\
  SECRET\000\
  SECRET1\000\
  PUBLICVARS\000\
  AND\000\
  OR\000\
  CONST\000\
  EQUIV\000\
  EQUIVLEFT\000\
  EQUIVRIGHT\000\
  MUL\000\
  DIV\000\
  ADD\000\
  SUB\000\
  POWER\000\
  SET\000\
  COLLISION\000\
  EVENT\000\
  IMPLIES\000\
  TIME\000\
  END\000\
  EVENT_ABORT\000\
  OTHERUSES\000\
  MAXLENGTH\000\
  LENGTH\000\
  MAX\000\
  COUNT\000\
  EPSFIND\000\
  EPSRAND\000\
  PCOLL1RAND\000\
  PCOLL2RAND\000\
  NEWORACLE\000\
  INJ\000\
  MAPSTO\000\
  DEF\000\
  LEFTARROW\000\
  RANDOM\000\
  RETURN\000\
  FUN\000\
  IN\000\
  DEFINE\000\
  EXPAND\000\
  LBRACE\000\
  RBRACE\000\
  PROOF\000\
  IMPLEMENTATION\000\
  READ\000\
  WRITE\000\
  GET\000\
  INSERT\000\
  TABLE\000\
  LETFUN\000\
  "

let yynames_block = "\
  IDENT\000\
  STRING\000\
  INT\000\
  FLOAT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : Ptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : 'identlist) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : Ptree.ident) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : Ptree.decl list) in
    Obj.repr(
# 182 "oparser.mly"
 ( (FunDecl(_2, _4, _7, _8)) :: _10 )
# 1119 "oparser.ml"
               : Ptree.decl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Ptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Ptree.decl list) in
    Obj.repr(
# 184 "oparser.mly"
        ( (EventDecl(_2, [])) :: _4 )
# 1127 "oparser.ml"
               : Ptree.decl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Ptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'identlist) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Ptree.decl list) in
    Obj.repr(
# 186 "oparser.mly"
        ( (EventDecl(_2, _4)) :: _7 )
# 1136 "oparser.ml"
               : Ptree.decl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'vartypelist) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Ptree.term_e) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Ptree.decl list) in
    Obj.repr(
# 188 "oparser.mly"
 ( (Statement(_2, _4)) :: _6 )
# 1145 "oparser.ml"
               : Ptree.decl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Ptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'identlist) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Ptree.decl list) in
    Obj.repr(
# 190 "oparser.mly"
        ( (BuiltinEquation(_2, _4)) :: _7 )
# 1154 "oparser.ml"
               : Ptree.decl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Ptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'process) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Ptree.decl list) in
    Obj.repr(
# 192 "oparser.mly"
 ( (PDef(_2,_4)) :: _6 )
# 1163 "oparser.ml"
               : Ptree.decl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Ptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Ptree.ident) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Ptree.decl list) in
    Obj.repr(
# 194 "oparser.mly"
        ( (Setting(_2,S _4)) :: _6 )
# 1172 "oparser.ml"
               : Ptree.decl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Ptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Ptree.decl list) in
    Obj.repr(
# 196 "oparser.mly"
        ( (Setting(_2,I _4)) :: _6 )
# 1181 "oparser.ml"
               : Ptree.decl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'queryseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Ptree.decl list) in
    Obj.repr(
# 198 "oparser.mly"
        ( (Query(_2)) :: _4 )
# 1189 "oparser.ml"
               : Ptree.decl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'neidentlist) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Ptree.decl list) in
    Obj.repr(
# 200 "oparser.mly"
        ( (List.map (fun x -> (ParamDecl(x, _3))) _2) @ _5 )
# 1198 "oparser.ml"
               : Ptree.decl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Ptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Ptree.decl list) in
    Obj.repr(
# 202 "oparser.mly"
        ( (ProbabilityDecl(_2)) :: _4 )
# 1206 "oparser.ml"
               : Ptree.decl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'neidentlist) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Ptree.ident) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Ptree.decl list) in
    Obj.repr(
# 204 "oparser.mly"
        ( (List.map (fun x -> (ConstDecl(x,_4))) _2) @ _6 )
# 1215 "oparser.ml"
               : Ptree.decl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Ptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Ptree.decl list) in
    Obj.repr(
# 206 "oparser.mly"
        ( (TypeDecl(_2,_3)) :: _5 )
# 1224 "oparser.ml"
               : Ptree.decl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : 'eqname) in
    let _3 = (Parsing.peek_val __caml_parser_env 7 : 'eqmember) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : 'probaf) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : 'optpriority) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'eqmember) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : Ptree.decl list) in
    Obj.repr(
# 208 "oparser.mly"
        ( (EqStatement(_2, _3, _8, _5, _7)) :: _10 )
# 1236 "oparser.ml"
               : Ptree.decl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 16 : 'newlist) in
    let _4 = (Parsing.peek_val __caml_parser_env 14 : 'vartypelist) in
    let _8 = (Parsing.peek_val __caml_parser_env 10 : Ptree.term_e) in
    let _11 = (Parsing.peek_val __caml_parser_env 7 : 'probaf) in
    let _15 = (Parsing.peek_val __caml_parser_env 3 : Ptree.term_e) in
    let _18 = (Parsing.peek_val __caml_parser_env 0 : Ptree.decl list) in
    Obj.repr(
# 210 "oparser.mly"
        ( (Collision(_2, _4, _8, _11, _15)) :: _18 )
# 1248 "oparser.ml"
               : Ptree.decl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 13 : 'newlist) in
    let _5 = (Parsing.peek_val __caml_parser_env 10 : Ptree.term_e) in
    let _8 = (Parsing.peek_val __caml_parser_env 7 : 'probaf) in
    let _12 = (Parsing.peek_val __caml_parser_env 3 : Ptree.term_e) in
    let _15 = (Parsing.peek_val __caml_parser_env 0 : Ptree.decl list) in
    Obj.repr(
# 212 "oparser.mly"
        ( (Collision(_2, [], _5, _8, _12)) :: _15 )
# 1259 "oparser.ml"
               : Ptree.decl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : Ptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'identlist) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : Ptree.decl list) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : Ptree.decl list) in
    Obj.repr(
# 214 "oparser.mly"
        ( (Define(_2, _4, _7)) :: _9 )
# 1269 "oparser.ml"
               : Ptree.decl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Ptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'identlist) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Ptree.decl list) in
    Obj.repr(
# 216 "oparser.mly"
        ( (Expand(_2, _4)) :: _7 )
# 1278 "oparser.ml"
               : Ptree.decl list))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'proof) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Ptree.decl list) in
    Obj.repr(
# 218 "oparser.mly"
        ( (Proofinfo(_3))::_5 )
# 1286 "oparser.ml"
               : Ptree.decl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'impllist) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Ptree.decl list) in
    Obj.repr(
# 220 "oparser.mly"
        ( (Implementation(_2)) :: _4 )
# 1294 "oparser.ml"
               : Ptree.decl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Ptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'neidentlist) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Ptree.decl list) in
    Obj.repr(
# 222 "oparser.mly"
        ( (TableDecl(_2,_4)) :: _7 )
# 1303 "oparser.ml"
               : Ptree.decl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Ptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Ptree.term_e) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Ptree.decl list) in
    Obj.repr(
# 224 "oparser.mly"
        ( (LetFun(_2,[],_4)) :: _6 )
# 1312 "oparser.ml"
               : Ptree.decl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : Ptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'vartypelist) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : Ptree.term_e) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : Ptree.decl list) in
    Obj.repr(
# 226 "oparser.mly"
        ( (LetFun(_2,_4,_7)) :: _9 )
# 1322 "oparser.ml"
               : Ptree.decl list))
; (fun __caml_parser_env ->
    Obj.repr(
# 228 "oparser.mly"
        ( [] )
# 1328 "oparser.ml"
               : Ptree.decl list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'impl) in
    Obj.repr(
# 232 "oparser.mly"
        ( [_1] )
# 1335 "oparser.ml"
               : 'impllist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'impl) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'impllist) in
    Obj.repr(
# 234 "oparser.mly"
        ( _1 :: _3 )
# 1343 "oparser.ml"
               : 'impllist))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Ptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'typeid) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'typeoptions) in
    Obj.repr(
# 238 "oparser.mly"
        ( Type(_2,_4,_5) )
# 1352 "oparser.ml"
               : 'impl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Ptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Ptree.ident) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'functionoptions) in
    Obj.repr(
# 240 "oparser.mly"
        ( Function(_2,_4,_5) )
# 1361 "oparser.ml"
               : 'impl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Ptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Ptree.ident) in
    Obj.repr(
# 242 "oparser.mly"
        ( ImplTable(_2,_4) )
# 1369 "oparser.ml"
               : 'impl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Ptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Ptree.ident) in
    Obj.repr(
# 244 "oparser.mly"
        ( Constant(_2,_4) )
# 1377 "oparser.ml"
               : 'impl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 248 "oparser.mly"
        ( TypeSize (_1) )
# 1384 "oparser.ml"
               : 'typeid))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ptree.ident) in
    Obj.repr(
# 250 "oparser.mly"
        ( TypeName (_1) )
# 1391 "oparser.ml"
               : 'typeid))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ptree.ident) in
    Obj.repr(
# 254 "oparser.mly"
        ( [_1] )
# 1398 "oparser.ml"
               : 'stringlistne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'stringlistne) in
    Obj.repr(
# 256 "oparser.mly"
        ( _1::_3 )
# 1406 "oparser.ml"
               : 'stringlistne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'stringlistne) in
    Obj.repr(
# 260 "oparser.mly"
        ( _1,_3 )
# 1414 "oparser.ml"
               : 'typeopt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typeopt) in
    Obj.repr(
# 264 "oparser.mly"
        ( [_1] )
# 1421 "oparser.ml"
               : 'typeoptlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typeopt) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typeoptlist) in
    Obj.repr(
# 266 "oparser.mly"
        ( _1::_3 )
# 1429 "oparser.ml"
               : 'typeoptlist))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'typeoptlist) in
    Obj.repr(
# 270 "oparser.mly"
        ( _2 )
# 1436 "oparser.ml"
               : 'typeoptions))
; (fun __caml_parser_env ->
    Obj.repr(
# 272 "oparser.mly"
        ( [] )
# 1442 "oparser.ml"
               : 'typeoptions))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ptree.ident) in
    Obj.repr(
# 276 "oparser.mly"
        ( _1,_3 )
# 1450 "oparser.ml"
               : 'funopt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'funopt) in
    Obj.repr(
# 280 "oparser.mly"
        ( [_1] )
# 1457 "oparser.ml"
               : 'funoptlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'funopt) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'funoptlist) in
    Obj.repr(
# 282 "oparser.mly"
        ( _1::_3 )
# 1465 "oparser.ml"
               : 'funoptlist))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'funoptlist) in
    Obj.repr(
# 286 "oparser.mly"
        ( _2 )
# 1472 "oparser.ml"
               : 'functionoptions))
; (fun __caml_parser_env ->
    Obj.repr(
# 288 "oparser.mly"
        ( [] )
# 1478 "oparser.ml"
               : 'functionoptions))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'progoptlist) in
    Obj.repr(
# 292 "oparser.mly"
        ( _2 )
# 1485 "oparser.ml"
               : 'programoptions))
; (fun __caml_parser_env ->
    Obj.repr(
# 294 "oparser.mly"
        ( [] )
# 1491 "oparser.ml"
               : 'programoptions))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'progopt) in
    Obj.repr(
# 298 "oparser.mly"
        ( [_1] )
# 1498 "oparser.ml"
               : 'progoptlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'progopt) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'progoptlist) in
    Obj.repr(
# 300 "oparser.mly"
        ( _1 :: _3 )
# 1506 "oparser.ml"
               : 'progoptlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ptree.ident) in
    Obj.repr(
# 304 "oparser.mly"
        ( PWrite(_1,_3) )
# 1514 "oparser.ml"
               : 'progopt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ptree.ident) in
    Obj.repr(
# 306 "oparser.mly"
        ( PRead(_1,_3) )
# 1522 "oparser.ml"
               : 'progopt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ptree.ident) in
    Obj.repr(
# 310 "oparser.mly"
        ( _1 )
# 1529 "oparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ptree.ident) in
    Obj.repr(
# 312 "oparser.mly"
        ( _1 )
# 1536 "oparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 314 "oparser.mly"
        ( string_of_int _1, parse_extent() )
# 1543 "oparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    Obj.repr(
# 316 "oparser.mly"
        ( "*", parse_extent() )
# 1549 "oparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    Obj.repr(
# 318 "oparser.mly"
        ( ".", parse_extent() )
# 1555 "oparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    Obj.repr(
# 320 "oparser.mly"
        ( "set", parse_extent() )
# 1561 "oparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    Obj.repr(
# 322 "oparser.mly"
        ( "insert", parse_extent() )
# 1567 "oparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    Obj.repr(
# 324 "oparser.mly"
        ( "=", parse_extent() )
# 1573 "oparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    Obj.repr(
# 326 "oparser.mly"
        ( ",", parse_extent() )
# 1579 "oparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    Obj.repr(
# 328 "oparser.mly"
        ( "(", parse_extent() )
# 1585 "oparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    Obj.repr(
# 330 "oparser.mly"
        ( ")", parse_extent() )
# 1591 "oparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'prooftoken) in
    Obj.repr(
# 334 "oparser.mly"
        ( [_1] )
# 1598 "oparser.ml"
               : 'proofcommand))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'prooftoken) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'proofcommand) in
    Obj.repr(
# 336 "oparser.mly"
        ( _1 :: _2 )
# 1606 "oparser.ml"
               : 'proofcommand))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'proofcommand) in
    Obj.repr(
# 340 "oparser.mly"
 ( [_1] )
# 1613 "oparser.ml"
               : 'proof))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'proofcommand) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'proof) in
    Obj.repr(
# 342 "oparser.mly"
        ( _1 :: _3 )
# 1621 "oparser.ml"
               : 'proof))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'neidentlist) in
    Obj.repr(
# 346 "oparser.mly"
        ( _2 )
# 1628 "oparser.ml"
               : 'options))
; (fun __caml_parser_env ->
    Obj.repr(
# 348 "oparser.mly"
        ( [] )
# 1634 "oparser.ml"
               : 'options))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Ptree.decl list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'process) in
    Obj.repr(
# 352 "oparser.mly"
 ( _1, _3 )
# 1642 "oparser.ml"
               : Ptree.decl list * Ptree.process_e))
; (fun __caml_parser_env ->
    Obj.repr(
# 356 "oparser.mly"
        ( [] )
# 1648 "oparser.ml"
               : 'identlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'neidentlist) in
    Obj.repr(
# 358 "oparser.mly"
        ( _1 )
# 1655 "oparser.ml"
               : 'identlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ptree.ident) in
    Obj.repr(
# 362 "oparser.mly"
        ( [_1] )
# 1662 "oparser.ml"
               : 'neidentlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'neidentlist) in
    Obj.repr(
# 364 "oparser.mly"
        ( _1 :: _3 )
# 1670 "oparser.ml"
               : 'neidentlist))
; (fun __caml_parser_env ->
    Obj.repr(
# 368 "oparser.mly"
        ( [] )
# 1676 "oparser.ml"
               : 'vartypelist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nevartypelist) in
    Obj.repr(
# 370 "oparser.mly"
        ( _1 )
# 1683 "oparser.ml"
               : 'vartypelist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ptree.ident) in
    Obj.repr(
# 374 "oparser.mly"
        ( [(_1, _3)] )
# 1691 "oparser.ml"
               : 'nevartypelist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Ptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Ptree.ident) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'nevartypelist) in
    Obj.repr(
# 376 "oparser.mly"
        ( (_1, _3) :: _5 )
# 1700 "oparser.ml"
               : 'nevartypelist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Ptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'termseq) in
    Obj.repr(
# 380 "oparser.mly"
 ( PFunApp (_1, _3), parse_extent() )
# 1708 "oparser.ml"
               : Ptree.term_e))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ptree.ident) in
    Obj.repr(
# 382 "oparser.mly"
        ( PInjEvent(_3, []), parse_extent() )
# 1715 "oparser.ml"
               : Ptree.term_e))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Ptree.ident) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'termseq) in
    Obj.repr(
# 384 "oparser.mly"
        ( PInjEvent(_3, _5), parse_extent() )
# 1723 "oparser.ml"
               : Ptree.term_e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ptree.ident) in
    Obj.repr(
# 386 "oparser.mly"
 ( PIdent (_1), parse_extent() )
# 1730 "oparser.ml"
               : Ptree.term_e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Ptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'termseq) in
    Obj.repr(
# 388 "oparser.mly"
        ( PArray (_1, _3), parse_extent() )
# 1738 "oparser.ml"
               : Ptree.term_e))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'termseq) in
    Obj.repr(
# 390 "oparser.mly"
 ( match _2 with
	    [t] -> t (* Allow parentheses for priorities of infix operators;
			Tuples cannot have one element. *)
	  | l -> PTuple(l), parse_extent() )
# 1748 "oparser.ml"
               : Ptree.term_e))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'findcond) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Ptree.term_e) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Ptree.term_e) in
    Obj.repr(
# 395 "oparser.mly"
        ( begin
	  match _2 with
	    ([], t) -> PTestE(t, _4, _6)
	  | (def_list, t) -> 
	      PFindE([(ref [], [], def_list, t, _4)], _6, [])
	  end, parse_extent() )
# 1762 "oparser.ml"
               : Ptree.term_e))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'options) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'findlistterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Ptree.term_e) in
    Obj.repr(
# 402 "oparser.mly"
        ( PFindE(_3, _5, _2), parse_extent() )
# 1771 "oparser.ml"
               : Ptree.term_e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'basicpattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Ptree.term_e) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Ptree.term_e) in
    Obj.repr(
# 404 "oparser.mly"
        ( PLetE(_1,_3,_5,None), parse_extent() )
# 1780 "oparser.ml"
               : Ptree.term_e))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'pattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : Ptree.term_e) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Ptree.term_e) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Ptree.term_e) in
    Obj.repr(
# 406 "oparser.mly"
        ( PLetE(_2,_4,_6,Some _8), parse_extent() )
# 1790 "oparser.ml"
               : Ptree.term_e))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'pattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Ptree.term_e) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Ptree.term_e) in
    Obj.repr(
# 408 "oparser.mly"
        ( PLetE(_2,_4,_6,None), parse_extent() )
# 1799 "oparser.ml"
               : Ptree.term_e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Ptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Ptree.ident) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Ptree.term_e) in
    Obj.repr(
# 410 "oparser.mly"
 ( PResE(_1, _3, _5), parse_extent() )
# 1808 "oparser.ml"
               : Ptree.term_e))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ptree.ident) in
    Obj.repr(
# 412 "oparser.mly"
        ( PEventAbortE(_2), parse_extent() )
# 1815 "oparser.ml"
               : Ptree.term_e))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Ptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Ptree.term_e) in
    Obj.repr(
# 414 "oparser.mly"
        ( PEventE((PFunApp(_2, []), parse_extent()), _4), parse_extent() )
# 1823 "oparser.ml"
               : Ptree.term_e))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Ptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'termseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Ptree.term_e) in
    Obj.repr(
# 416 "oparser.mly"
        ( PEventE((PFunApp(_2, _4), parse_extent()), _7), parse_extent() )
# 1832 "oparser.ml"
               : Ptree.term_e))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Ptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'termseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Ptree.term_e) in
    Obj.repr(
# 418 "oparser.mly"
        ( PInsertE(_2,_4,_7), parse_extent() )
# 1841 "oparser.ml"
               : Ptree.term_e))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 9 : Ptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 7 : 'patternseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : Ptree.term_e) in
    let _9 = (Parsing.peek_val __caml_parser_env 2 : Ptree.term_e) in
    let _11 = (Parsing.peek_val __caml_parser_env 0 : Ptree.term_e) in
    Obj.repr(
# 420 "oparser.mly"
        ( PGetE(_2,_4,Some _7,_9,_11), parse_extent() )
# 1852 "oparser.ml"
               : Ptree.term_e))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : Ptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'patternseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : Ptree.term_e) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : Ptree.term_e) in
    Obj.repr(
# 422 "oparser.mly"
        ( PGetE(_2,_4,None,_7,_9), parse_extent() )
# 1862 "oparser.ml"
               : Ptree.term_e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ptree.term_e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ptree.term_e) in
    Obj.repr(
# 424 "oparser.mly"
        ( PEqual(_1, _3), parse_extent() )
# 1870 "oparser.ml"
               : Ptree.term_e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ptree.term_e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ptree.term_e) in
    Obj.repr(
# 426 "oparser.mly"
        ( PDiff(_1, _3), parse_extent() )
# 1878 "oparser.ml"
               : Ptree.term_e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ptree.term_e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ptree.term_e) in
    Obj.repr(
# 428 "oparser.mly"
        ( POr(_1, _3), parse_extent() )
# 1886 "oparser.ml"
               : Ptree.term_e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ptree.term_e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ptree.term_e) in
    Obj.repr(
# 430 "oparser.mly"
        ( PAnd(_1, _3), parse_extent() )
# 1894 "oparser.ml"
               : Ptree.term_e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Ptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'termseq) in
    Obj.repr(
# 434 "oparser.mly"
    ( _1,_3 )
# 1902 "oparser.ml"
               : 'vref))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ptree.ident) in
    Obj.repr(
# 436 "oparser.mly"
    ( _1, [] )
# 1909 "oparser.ml"
               : 'vref))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'vref) in
    Obj.repr(
# 440 "oparser.mly"
    ( [_1] )
# 1916 "oparser.ml"
               : 'vreflist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'vref) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'vreflist) in
    Obj.repr(
# 442 "oparser.mly"
    ( _1::_3 )
# 1924 "oparser.ml"
               : 'vreflist))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'vreflist) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'vref) in
    Obj.repr(
# 446 "oparser.mly"
    ( None )
# 1932 "oparser.ml"
               : 'otherusescond))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'vref) in
    Obj.repr(
# 448 "oparser.mly"
    ( None )
# 1939 "oparser.ml"
               : 'otherusescond))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'vreflist) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'otherusescond) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Ptree.term_e) in
    Obj.repr(
# 452 "oparser.mly"
    ( (_3, _8) )
# 1948 "oparser.ml"
               : 'findcond1))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'vreflist) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'otherusescond) in
    Obj.repr(
# 454 "oparser.mly"
    ( (_3, cst_true) )
# 1956 "oparser.ml"
               : 'findcond1))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'vreflist) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Ptree.term_e) in
    Obj.repr(
# 456 "oparser.mly"
    ( (_3, _6) )
# 1964 "oparser.ml"
               : 'findcond1))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'vreflist) in
    Obj.repr(
# 458 "oparser.mly"
    ( (_3, cst_true) )
# 1971 "oparser.ml"
               : 'findcond1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'findcond1) in
    Obj.repr(
# 462 "oparser.mly"
    ( _1 )
# 1978 "oparser.ml"
               : 'findcond))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ptree.term_e) in
    Obj.repr(
# 464 "oparser.mly"
    ( ([], _1) )
# 1985 "oparser.ml"
               : 'findcond))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'findcond1) in
    Obj.repr(
# 466 "oparser.mly"
    ( _2 )
# 1992 "oparser.ml"
               : 'findcond))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'tidentseq) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'findcond) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Ptree.term_e) in
    Obj.repr(
# 470 "oparser.mly"
    ( let (def_list, t) = _3 in
      (ref [], _1, def_list, t, _5) )
# 2002 "oparser.ml"
               : 'findoneterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'findoneterm) in
    Obj.repr(
# 475 "oparser.mly"
    ( [_1] )
# 2009 "oparser.ml"
               : 'findlistterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'findoneterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'findlistterm) in
    Obj.repr(
# 477 "oparser.mly"
    ( _1 :: _3 )
# 2017 "oparser.ml"
               : 'findlistterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ptree.ident) in
    Obj.repr(
# 481 "oparser.mly"
    ( [_1,_3] )
# 2025 "oparser.ml"
               : 'netidentseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Ptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Ptree.ident) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'netidentseq) in
    Obj.repr(
# 483 "oparser.mly"
    ( (_1,_3)::_5 )
# 2034 "oparser.ml"
               : 'netidentseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'netidentseq) in
    Obj.repr(
# 487 "oparser.mly"
    ( _1 )
# 2041 "oparser.ml"
               : 'tidentseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 489 "oparser.mly"
    ( [] )
# 2047 "oparser.ml"
               : 'tidentseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ptree.term_e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'netermseq) in
    Obj.repr(
# 493 "oparser.mly"
 ( _1 :: _3 )
# 2055 "oparser.ml"
               : 'netermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ptree.term_e) in
    Obj.repr(
# 495 "oparser.mly"
 ( [_1] )
# 2062 "oparser.ml"
               : 'netermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'netermseq) in
    Obj.repr(
# 499 "oparser.mly"
        ( _1 )
# 2069 "oparser.ml"
               : 'termseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 501 "oparser.mly"
        ( [] )
# 2075 "oparser.ml"
               : 'termseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ptree.ident) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'programoptions) in
    Obj.repr(
# 505 "oparser.mly"
        ((_1,_2))
# 2083 "oparser.ml"
               : 'progbegin))
; (fun __caml_parser_env ->
    Obj.repr(
# 509 "oparser.mly"
        (true)
# 2089 "oparser.ml"
               : 'progend))
; (fun __caml_parser_env ->
    Obj.repr(
# 511 "oparser.mly"
        (false)
# 2095 "oparser.ml"
               : 'progend))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'progbegin) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'process) in
    Obj.repr(
# 515 "oparser.mly"
        ( PBeginModule(_1, _2), parse_extent() )
# 2103 "oparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'process) in
    Obj.repr(
# 517 "oparser.mly"
 ( _2 )
# 2110 "oparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ptree.ident) in
    Obj.repr(
# 519 "oparser.mly"
 ( PLetDef _1, parse_extent() )
# 2117 "oparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Ptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Ptree.ident) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'process) in
    Obj.repr(
# 521 "oparser.mly"
 ( PRepl (ref None,Some _2,_4,_6), parse_extent() )
# 2126 "oparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 523 "oparser.mly"
 ( let x = _1 in
	  if x = 0 then PNil, parse_extent() else 
          input_error ("The only integer in a process is 0 for the nil process") (parse_extent()) )
# 2135 "oparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Ptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Ptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'optprocess) in
    Obj.repr(
# 527 "oparser.mly"
 ( PRestr(_1, _3, _4), parse_extent() )
# 2144 "oparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'findcond) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'process) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'optelse) in
    Obj.repr(
# 529 "oparser.mly"
        ( match _2 with
	    ([], t) -> PTest(t, _4, _5), parse_extent()
	  | (def_list, t) -> 
	      PFind([(ref [], [], def_list, t, _4)], _5, []), parse_extent() )
# 2156 "oparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'findlistproc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'optelse) in
    Obj.repr(
# 534 "oparser.mly"
        ( PFind(_3,_4,_2), parse_extent() )
# 2165 "oparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Ptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'termseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'optprocess) in
    Obj.repr(
# 536 "oparser.mly"
        ( PInsert(_2,_4,_6), parse_extent() )
# 2174 "oparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : Ptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : 'patternseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : Ptree.term_e) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : 'process) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : 'optelse) in
    Obj.repr(
# 538 "oparser.mly"
        ( PGet(_2,_4,Some _7,_9,_10), parse_extent() )
# 2185 "oparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : Ptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'patternseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'process) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'optelse) in
    Obj.repr(
# 540 "oparser.mly"
        ( PGet(_2,_4,None,_7,_8), parse_extent() )
# 2195 "oparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'optprocess) in
    Obj.repr(
# 542 "oparser.mly"
        ( PEvent((PFunApp(_2, []), parse_extent()), _3), parse_extent() )
# 2203 "oparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Ptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'termseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'optprocess) in
    Obj.repr(
# 544 "oparser.mly"
        ( PEvent((PFunApp(_2, _4), parse_extent()), _6), parse_extent() )
# 2212 "oparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'basicpattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ptree.term_e) in
    Obj.repr(
# 546 "oparser.mly"
 ( PLet(_1,_3,(PYield, parse_extent()),(PYield, parse_extent())), parse_extent() )
# 2220 "oparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'basicpattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Ptree.term_e) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'process) in
    Obj.repr(
# 548 "oparser.mly"
 ( PLet(_1,_3,_5,(PYield, parse_extent())), parse_extent() )
# 2229 "oparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Ptree.term_e) in
    Obj.repr(
# 550 "oparser.mly"
 ( PLet(_2,_4,(PYield, parse_extent()),(PYield, parse_extent())), parse_extent() )
# 2237 "oparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'pattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : Ptree.term_e) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'process) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'optelse) in
    Obj.repr(
# 552 "oparser.mly"
 ( PLet(_2,_4,_6,_7), parse_extent() )
# 2247 "oparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Ptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'patternseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'process) in
    Obj.repr(
# 554 "oparser.mly"
 ( let (_,ext) = _1 in
	  PInput(_1,(PPatTuple _3, ext),_6), parse_extent() )
# 2257 "oparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'termseq) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'progend) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'optinputprocess) in
    Obj.repr(
# 557 "oparser.mly"
 ( POutput(_5,return_channel, (PTuple(_3), parse_extent()),_6), parse_extent() )
# 2266 "oparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'progend) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'optinputprocess) in
    Obj.repr(
# 559 "oparser.mly"
 ( POutput(_2,return_channel, (PTuple [], parse_extent()),_3), parse_extent() )
# 2274 "oparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    Obj.repr(
# 561 "oparser.mly"
        ( PYield, parse_extent() )
# 2280 "oparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ptree.ident) in
    Obj.repr(
# 563 "oparser.mly"
        ( PEventAbort(_2), parse_extent() )
# 2287 "oparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'process) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'process) in
    Obj.repr(
# 565 "oparser.mly"
 ( PPar(_1,_3), parse_extent() )
# 2295 "oparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'tidentseq) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'findcond) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'process) in
    Obj.repr(
# 569 "oparser.mly"
    ( let (def_list, t) = _3 in
      (ref [], _1, def_list, t, _5) )
# 2305 "oparser.ml"
               : 'findoneproc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'findoneproc) in
    Obj.repr(
# 574 "oparser.mly"
    ( [_1] )
# 2312 "oparser.ml"
               : 'findlistproc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'findoneproc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'findlistproc) in
    Obj.repr(
# 576 "oparser.mly"
    ( _1 :: _3 )
# 2320 "oparser.ml"
               : 'findlistproc))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'process) in
    Obj.repr(
# 580 "oparser.mly"
        ( _2 )
# 2327 "oparser.ml"
               : 'optprocess))
; (fun __caml_parser_env ->
    Obj.repr(
# 582 "oparser.mly"
        ( PYield, parse_extent() )
# 2333 "oparser.ml"
               : 'optprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'process) in
    Obj.repr(
# 586 "oparser.mly"
        ( _2 )
# 2340 "oparser.ml"
               : 'optinputprocess))
; (fun __caml_parser_env ->
    Obj.repr(
# 588 "oparser.mly"
        ( PNil, parse_extent() )
# 2346 "oparser.ml"
               : 'optinputprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'process) in
    Obj.repr(
# 592 "oparser.mly"
        ( _2 )
# 2353 "oparser.ml"
               : 'optelse))
; (fun __caml_parser_env ->
    Obj.repr(
# 594 "oparser.mly"
        ( PYield, parse_extent() )
# 2359 "oparser.ml"
               : 'optelse))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ptree.ident) in
    Obj.repr(
# 598 "oparser.mly"
    ( PPatVar(_1,None), parse_extent() )
# 2366 "oparser.ml"
               : 'basicpattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ptree.ident) in
    Obj.repr(
# 600 "oparser.mly"
    ( PPatVar(_1,Some _3), parse_extent() )
# 2374 "oparser.ml"
               : 'basicpattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ptree.ident) in
    Obj.repr(
# 604 "oparser.mly"
    ( PPatVar(_1,None), parse_extent() )
# 2381 "oparser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ptree.ident) in
    Obj.repr(
# 606 "oparser.mly"
    ( PPatVar(_1,Some _3), parse_extent() )
# 2389 "oparser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Ptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'patternseq) in
    Obj.repr(
# 608 "oparser.mly"
    ( PPatFunApp(_1,_3), parse_extent() )
# 2397 "oparser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'patternseq) in
    Obj.repr(
# 610 "oparser.mly"
    (  match _2 with
	    [t] -> t (* Allow parentheses for priorities of infix operators;
			Tuples cannot have one element. *)
	  | l -> PPatTuple(_2), parse_extent() )
# 2407 "oparser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ptree.term_e) in
    Obj.repr(
# 615 "oparser.mly"
    ( PPatEqual(_2), parse_extent() )
# 2414 "oparser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'nepatternseq) in
    Obj.repr(
# 619 "oparser.mly"
    ( _1 :: _3 )
# 2422 "oparser.ml"
               : 'nepatternseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 621 "oparser.mly"
    ( [_1] )
# 2429 "oparser.ml"
               : 'nepatternseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nepatternseq) in
    Obj.repr(
# 625 "oparser.mly"
    ( _1 )
# 2436 "oparser.ml"
               : 'patternseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 627 "oparser.mly"
    ( [] )
# 2442 "oparser.ml"
               : 'patternseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'query) in
    Obj.repr(
# 631 "oparser.mly"
    ( [_1] )
# 2449 "oparser.ml"
               : 'queryseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'query) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'queryseq) in
    Obj.repr(
# 633 "oparser.mly"
    ( _1::_3 )
# 2457 "oparser.ml"
               : 'queryseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'optpublicvars) in
    Obj.repr(
# 637 "oparser.mly"
    ( PQSecret (_2,_3) )
# 2465 "oparser.ml"
               : 'query))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'optpublicvars) in
    Obj.repr(
# 639 "oparser.mly"
    ( PQSecret1 (_2,_3) )
# 2473 "oparser.ml"
               : 'query))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'vartypeilist) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Ptree.term_e) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Ptree.term_e) in
    Obj.repr(
# 641 "oparser.mly"
    ( PQEvent(_1, _4, _6) )
# 2482 "oparser.ml"
               : 'query))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Ptree.term_e) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Ptree.term_e) in
    Obj.repr(
# 643 "oparser.mly"
    ( PQEvent([], _2, _4) )
# 2490 "oparser.ml"
               : 'query))
; (fun __caml_parser_env ->
    Obj.repr(
# 647 "oparser.mly"
    ( None )
# 2496 "oparser.ml"
               : 'optpublicvars))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'identlist) in
    Obj.repr(
# 649 "oparser.mly"
    ( Some _2 )
# 2503 "oparser.ml"
               : 'optpublicvars))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Ptree.term_e) in
    Obj.repr(
# 653 "oparser.mly"
        ( _3 )
# 2510 "oparser.ml"
               : 'procasterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'procasterm) in
    Obj.repr(
# 655 "oparser.mly"
        ( _2 )
# 2517 "oparser.ml"
               : 'procasterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'findcond) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'procasterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'procasterm) in
    Obj.repr(
# 657 "oparser.mly"
        ( begin
	  match _2 with
	    ([], t) -> PTestE(t, _4, _6)
	  | (def_list, t) -> 
	      PFindE([(ref [], [], def_list, t, _4)], _6, [])
	  end, parse_extent() )
# 2531 "oparser.ml"
               : 'procasterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'options) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'findlistprocasterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'procasterm) in
    Obj.repr(
# 664 "oparser.mly"
        ( PFindE(_3, _5, _2), parse_extent() )
# 2540 "oparser.ml"
               : 'procasterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'basicpattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Ptree.term_e) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'procasterm) in
    Obj.repr(
# 666 "oparser.mly"
        ( PLetE(_1,_3,_5,None), parse_extent() )
# 2549 "oparser.ml"
               : 'procasterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'pattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : Ptree.term_e) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'procasterm) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'procasterm) in
    Obj.repr(
# 668 "oparser.mly"
        ( PLetE(_2,_4,_6,Some _8), parse_extent() )
# 2559 "oparser.ml"
               : 'procasterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'pattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Ptree.term_e) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'procasterm) in
    Obj.repr(
# 670 "oparser.mly"
        ( PLetE(_2,_4,_6,None), parse_extent() )
# 2568 "oparser.ml"
               : 'procasterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Ptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Ptree.ident) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'procasterm) in
    Obj.repr(
# 672 "oparser.mly"
 ( PResE(_1, _3, _5), parse_extent() )
# 2577 "oparser.ml"
               : 'procasterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ptree.ident) in
    Obj.repr(
# 674 "oparser.mly"
        ( PEventAbortE(_2), parse_extent() )
# 2584 "oparser.ml"
               : 'procasterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'tidentseq) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'findcond) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'procasterm) in
    Obj.repr(
# 678 "oparser.mly"
    ( let (def_list, t) = _3 in
      (ref [], _1, def_list, t, _5) )
# 2594 "oparser.ml"
               : 'findoneprocasterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'findoneprocasterm) in
    Obj.repr(
# 683 "oparser.mly"
    ( [_1] )
# 2601 "oparser.ml"
               : 'findlistprocasterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'findoneprocasterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'findlistprocasterm) in
    Obj.repr(
# 685 "oparser.mly"
    ( _1 :: _3 )
# 2609 "oparser.ml"
               : 'findlistprocasterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ptree.ident) in
    Obj.repr(
# 689 "oparser.mly"
    ( CstName _1 )
# 2616 "oparser.ml"
               : 'eqname))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Ptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Ptree.ident) in
    Obj.repr(
# 691 "oparser.mly"
    ( ParName(_1,_3) )
# 2624 "oparser.ml"
               : 'eqname))
; (fun __caml_parser_env ->
    Obj.repr(
# 693 "oparser.mly"
    ( NoName )
# 2630 "oparser.ml"
               : 'eqname))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'funmode) in
    Obj.repr(
# 697 "oparser.mly"
    ( [_1], parse_extent() )
# 2637 "oparser.ml"
               : 'eqmember))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'funmode) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'eqmember) in
    Obj.repr(
# 699 "oparser.mly"
    ( _1 :: (fst _3), parse_extent() )
# 2645 "oparser.ml"
               : 'eqmember))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fungroup) in
    Obj.repr(
# 704 "oparser.mly"
    ( _1,None, parse_extent() )
# 2652 "oparser.ml"
               : 'funmode))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'fungroup) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Ptree.ident) in
    Obj.repr(
# 706 "oparser.mly"
    ( _1,Some _3, parse_extent() )
# 2660 "oparser.ml"
               : 'funmode))
; (fun __caml_parser_env ->
    Obj.repr(
# 710 "oparser.mly"
    ( [] )
# 2666 "oparser.ml"
               : 'newlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Ptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Ptree.ident) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'newlist) in
    Obj.repr(
# 712 "oparser.mly"
    ( (_1,_3)::_5 )
# 2675 "oparser.ml"
               : 'newlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fungroup) in
    Obj.repr(
# 716 "oparser.mly"
    ( [_1] )
# 2682 "oparser.ml"
               : 'funlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'fungroup) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'funlist) in
    Obj.repr(
# 718 "oparser.mly"
    ( _1 :: _3 )
# 2690 "oparser.ml"
               : 'funlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fungroup) in
    Obj.repr(
# 722 "oparser.mly"
    ( [],[_1] )
# 2697 "oparser.ml"
               : 'newlistfunlist))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'funlist) in
    Obj.repr(
# 724 "oparser.mly"
    ( [],_2 )
# 2704 "oparser.ml"
               : 'newlistfunlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Ptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Ptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'newlistfunlist) in
    Obj.repr(
# 726 "oparser.mly"
    ( let (n,r) = _6 in ((_1,_3,_4)::n),r )
# 2714 "oparser.ml"
               : 'newlistfunlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'options) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 730 "oparser.mly"
    ( _3, _1 )
# 2722 "oparser.ml"
               : 'optpriority))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'options) in
    Obj.repr(
# 732 "oparser.mly"
    ( _2, _4 )
# 2730 "oparser.ml"
               : 'optpriority))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'options) in
    Obj.repr(
# 734 "oparser.mly"
    ( 0, _1 )
# 2737 "oparser.ml"
               : 'optpriority))
; (fun __caml_parser_env ->
    Obj.repr(
# 738 "oparser.mly"
        ( [] )
# 2743 "oparser.ml"
               : 'vartypeilist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nevartypeilist) in
    Obj.repr(
# 740 "oparser.mly"
        ( _1 )
# 2750 "oparser.ml"
               : 'vartypeilist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ptree.ident) in
    Obj.repr(
# 744 "oparser.mly"
        ( [(_1, Tid _3)] )
# 2758 "oparser.ml"
               : 'nevartypeilist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Ptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Ptree.ident) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'nevartypeilist) in
    Obj.repr(
# 746 "oparser.mly"
        ( (_1, Tid _3) :: _5 )
# 2767 "oparser.ml"
               : 'nevartypeilist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ptree.ident) in
    Obj.repr(
# 748 "oparser.mly"
        ( [(_1, TBound _3)] )
# 2775 "oparser.ml"
               : 'nevartypeilist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Ptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Ptree.ident) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'nevartypeilist) in
    Obj.repr(
# 750 "oparser.mly"
        ( (_1, TBound _3) :: _5 )
# 2784 "oparser.ml"
               : 'nevartypeilist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Ptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'vartypeilist) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'optpriority) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'procasterm) in
    Obj.repr(
# 754 "oparser.mly"
    ( PFun(_1, _3, _7, _5) )
# 2794 "oparser.ml"
               : 'fungroup))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Ptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Ptree.ident) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'newlistfunlist) in
    Obj.repr(
# 756 "oparser.mly"
    ( let (n,r) = _6 in
      PReplRestr((ref None, Some _2, _4), n, r) )
# 2804 "oparser.ml"
               : 'fungroup))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'probaf) in
    Obj.repr(
# 762 "oparser.mly"
        ( _2 )
# 2811 "oparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'probaf) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'probaf) in
    Obj.repr(
# 764 "oparser.mly"
        ( PAdd(_1,_3), parse_extent() )
# 2819 "oparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'probaf) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'probaf) in
    Obj.repr(
# 766 "oparser.mly"
        ( PSub(_1, _3), parse_extent() )
# 2827 "oparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'probaf) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'probaf) in
    Obj.repr(
# 768 "oparser.mly"
        ( PProd(_1,_3), parse_extent() )
# 2835 "oparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'probaf) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'probaf) in
    Obj.repr(
# 770 "oparser.mly"
        ( PDiv(_1,_3), parse_extent() )
# 2843 "oparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'probaflist) in
    Obj.repr(
# 772 "oparser.mly"
        ( PMax(_3), parse_extent() )
# 2850 "oparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ptree.ident) in
    Obj.repr(
# 774 "oparser.mly"
        ( (PPIdent _1), parse_extent() )
# 2857 "oparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ptree.ident) in
    Obj.repr(
# 776 "oparser.mly"
        ( (PCount _2), parse_extent() )
# 2864 "oparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Ptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'probaflist) in
    Obj.repr(
# 778 "oparser.mly"
        ( (PPFun(_1,_3)), parse_extent() )
# 2872 "oparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ptree.ident) in
    Obj.repr(
# 780 "oparser.mly"
        ( PCard(_2), parse_extent() )
# 2879 "oparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    Obj.repr(
# 782 "oparser.mly"
        ( PTime, parse_extent() )
# 2885 "oparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Ptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'probaflistopt) in
    Obj.repr(
# 784 "oparser.mly"
        ( PActTime(PAFunApp _3, _4), parse_extent() )
# 2893 "oparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Ptree.ident) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'probaflistopt) in
    Obj.repr(
# 786 "oparser.mly"
        ( PActTime(PAPatFunApp _4, _5), parse_extent() )
# 2901 "oparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    Obj.repr(
# 788 "oparser.mly"
        ( PActTime(PAReplIndex, []), parse_extent() )
# 2907 "oparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 2 : int) in
    Obj.repr(
# 790 "oparser.mly"
        ( PActTime(PAArrayAccess _4, []), parse_extent() )
# 2914 "oparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Ptree.ident) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'probaflistopt) in
    Obj.repr(
# 792 "oparser.mly"
        ( PActTime(PACompare _4, _5), parse_extent() )
# 2922 "oparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'identlist) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'probaflistopt) in
    Obj.repr(
# 794 "oparser.mly"
        ( PActTime(PAAppTuple _4, _6), parse_extent() )
# 2930 "oparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'identlist) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'probaflistopt) in
    Obj.repr(
# 796 "oparser.mly"
        ( PActTime(PAPatTuple _5, _7), parse_extent() )
# 2938 "oparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    Obj.repr(
# 798 "oparser.mly"
        ( PActTime(PAAnd, []), parse_extent() )
# 2944 "oparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    Obj.repr(
# 800 "oparser.mly"
        ( PActTime(PAOr, []), parse_extent() )
# 2950 "oparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Ptree.ident) in
    Obj.repr(
# 802 "oparser.mly"
        ( PActTime(PANew _4, []), parse_extent() )
# 2957 "oparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    Obj.repr(
# 804 "oparser.mly"
        ( PActTime(PANewChannel, []), parse_extent() )
# 2963 "oparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    Obj.repr(
# 806 "oparser.mly"
        ( PActTime(PAIf, []), parse_extent() )
# 2969 "oparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 808 "oparser.mly"
        ( PActTime(PAFind _4, []), parse_extent() )
# 2976 "oparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 810 "oparser.mly"
        ( let x = _1 in
	  if x = 0 then (PPZero,parse_extent())  else 
          (PCst x,parse_extent())  )
# 2985 "oparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 814 "oparser.mly"
        ( let x = _1 in
	  if x = 0.0 then (PPZero,parse_extent())  else 
	  (PFloatCst x,parse_extent())  )
# 2994 "oparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Ptree.term_e) in
    Obj.repr(
# 818 "oparser.mly"
        ( PMaxlength(_3), parse_extent() )
# 3001 "oparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Ptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'probaflistopt) in
    Obj.repr(
# 820 "oparser.mly"
        ( PLength(_3, _4), parse_extent() )
# 3009 "oparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'identlist) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'probaflistopt) in
    Obj.repr(
# 822 "oparser.mly"
        ( PLengthTuple(_4, _6), parse_extent() )
# 3017 "oparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    Obj.repr(
# 824 "oparser.mly"
        ( PEpsFind, parse_extent() )
# 3023 "oparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Ptree.ident) in
    Obj.repr(
# 826 "oparser.mly"
        ( PEpsRand(_3), parse_extent() )
# 3030 "oparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Ptree.ident) in
    Obj.repr(
# 828 "oparser.mly"
        ( PPColl1Rand(_3), parse_extent() )
# 3037 "oparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Ptree.ident) in
    Obj.repr(
# 830 "oparser.mly"
        ( PPColl2Rand(_3), parse_extent() )
# 3044 "oparser.ml"
               : 'probaf))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'probaflist) in
    Obj.repr(
# 834 "oparser.mly"
       ( _2 )
# 3051 "oparser.ml"
               : 'probaflistopt))
; (fun __caml_parser_env ->
    Obj.repr(
# 836 "oparser.mly"
       ( [] )
# 3057 "oparser.ml"
               : 'probaflistopt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'probaf) in
    Obj.repr(
# 840 "oparser.mly"
       ( [_1] )
# 3064 "oparser.ml"
               : 'probaflist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'probaf) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'probaflist) in
    Obj.repr(
# 842 "oparser.mly"
       ( _1 :: _3 )
# 3072 "oparser.ml"
               : 'probaflist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ptree.ident) in
    Obj.repr(
# 848 "oparser.mly"
    ( PRestr(_1, _3, (PYield, parse_extent())), parse_extent() )
# 3080 "oparser.ml"
               : Ptree.process_e))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'findcond) in
    Obj.repr(
# 850 "oparser.mly"
    ( 
      let yield = (PYield, parse_extent()) in
      match _2 with
	([], t) -> PTest(t, yield, yield), parse_extent()
      | (def_list, t) -> 
	  PFind([(ref [], [], def_list, t, yield)], yield, []), parse_extent()
    )
# 3093 "oparser.ml"
               : Ptree.process_e))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'findlistins) in
    Obj.repr(
# 858 "oparser.mly"
    ( PFind(_2, (PYield, parse_extent()), []), parse_extent() )
# 3100 "oparser.ml"
               : Ptree.process_e))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ptree.ident) in
    Obj.repr(
# 860 "oparser.mly"
    ( PEvent((PFunApp(_2, []), parse_extent()), (PYield, parse_extent())), parse_extent() )
# 3107 "oparser.ml"
               : Ptree.process_e))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Ptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'termseq) in
    Obj.repr(
# 862 "oparser.mly"
    ( PEvent((PFunApp(_2, _4), parse_extent()), (PYield, parse_extent())), parse_extent() )
# 3115 "oparser.ml"
               : Ptree.process_e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'basicpattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ptree.term_e) in
    Obj.repr(
# 864 "oparser.mly"
    ( PLet(_1,_3,(PYield, parse_extent()),(PYield, parse_extent())), parse_extent() )
# 3123 "oparser.ml"
               : Ptree.process_e))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'pattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Ptree.term_e) in
    Obj.repr(
# 866 "oparser.mly"
    ( PLet(_2,_4,(PYield, parse_extent()),(PYield, parse_extent())), parse_extent() )
# 3131 "oparser.ml"
               : Ptree.process_e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'tidentseq) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'findcond) in
    Obj.repr(
# 870 "oparser.mly"
    ( let (def_list, t) = _3 in
      (ref [], _1, def_list, t, (PYield, parse_extent())) )
# 3140 "oparser.ml"
               : 'findoneins))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'findoneins) in
    Obj.repr(
# 875 "oparser.mly"
    ( [_1] )
# 3147 "oparser.ml"
               : 'findlistins))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'findoneins) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'findlistins) in
    Obj.repr(
# 877 "oparser.mly"
    ( _1 :: _3 )
# 3155 "oparser.ml"
               : 'findlistins))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ptree.ident) in
    Obj.repr(
# 883 "oparser.mly"
    ( (_1, 1) )
# 3162 "oparser.ml"
               : 'factor))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 885 "oparser.mly"
    ( (_1, _3) )
# 3170 "oparser.ml"
               : 'factor))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'factor) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'num) in
    Obj.repr(
# 889 "oparser.mly"
    ( _1 :: _3 )
# 3178 "oparser.ml"
               : 'num))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'factor) in
    Obj.repr(
# 891 "oparser.mly"
    ( [_1] )
# 3185 "oparser.ml"
               : 'num))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'num) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ptree.ident) in
    Obj.repr(
# 895 "oparser.mly"
    ( (_1, Some _3) )
# 3193 "oparser.ml"
               : 'quot))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'num) in
    Obj.repr(
# 897 "oparser.mly"
    ( (_3, None) )
# 3200 "oparser.ml"
               : 'quot))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'quot) in
    Obj.repr(
# 901 "oparser.mly"
    ( [_1] )
# 3207 "oparser.ml"
               : ((Ptree.ident * int) list * Ptree.ident option) list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'quot) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : ((Ptree.ident * int) list * Ptree.ident option) list) in
    Obj.repr(
# 903 "oparser.mly"
    ( _1 :: _3 )
# 3215 "oparser.ml"
               : ((Ptree.ident * int) list * Ptree.ident option) list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ptree.ident) in
    Obj.repr(
# 909 "oparser.mly"
    ( [_1,_3] )
# 3223 "oparser.ml"
               : 'identmapping))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Ptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Ptree.ident) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'identmapping) in
    Obj.repr(
# 911 "oparser.mly"
    ( (_1,_3)::_5 )
# 3232 "oparser.ml"
               : 'identmapping))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ptree.ident) in
    Obj.repr(
# 915 "oparser.mly"
    ( [_1,_3] )
# 3240 "oparser.ml"
               : 'intidentmapping))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Ptree.ident) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'intidentmapping) in
    Obj.repr(
# 917 "oparser.mly"
    ( (_1,_3)::_5 )
# 3249 "oparser.ml"
               : 'intidentmapping))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'identmapping) in
    Obj.repr(
# 921 "oparser.mly"
    ( PVarMapping(_1, _3, false) )
# 3257 "oparser.ml"
               : 'detailedinfo))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Ptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'identmapping) in
    Obj.repr(
# 923 "oparser.mly"
    ( PVarMapping(_1, _3, true) )
# 3265 "oparser.ml"
               : 'detailedinfo))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'intidentmapping) in
    Obj.repr(
# 925 "oparser.mly"
    ( PTermMapping(_1, _3, false) )
# 3273 "oparser.ml"
               : 'detailedinfo))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Ptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'intidentmapping) in
    Obj.repr(
# 927 "oparser.mly"
    ( PTermMapping(_1, _3, true) )
# 3281 "oparser.ml"
               : 'detailedinfo))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'detailedinfo) in
    Obj.repr(
# 931 "oparser.mly"
    ( [_1] )
# 3288 "oparser.ml"
               : 'detailedinfolist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'detailedinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'detailedinfolist) in
    Obj.repr(
# 933 "oparser.mly"
    ( _1::_3 )
# 3296 "oparser.ml"
               : 'detailedinfolist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ptree.ident) in
    Obj.repr(
# 937 "oparser.mly"
        ( [_1] )
# 3303 "oparser.ml"
               : 'neidentlistnosep))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ptree.ident) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'neidentlistnosep) in
    Obj.repr(
# 939 "oparser.mly"
        ( _1 :: _2 )
# 3311 "oparser.ml"
               : 'neidentlistnosep))
; (fun __caml_parser_env ->
    Obj.repr(
# 943 "oparser.mly"
    ( PVarList([],false) )
# 3317 "oparser.ml"
               : Ptree.crypto_transf_user_info))
; (fun __caml_parser_env ->
    Obj.repr(
# 945 "oparser.mly"
    ( PRepeat )
# 3323 "oparser.ml"
               : Ptree.crypto_transf_user_info))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'neidentlistnosep) in
    Obj.repr(
# 947 "oparser.mly"
    ( PVarList(_1, false) )
# 3330 "oparser.ml"
               : Ptree.crypto_transf_user_info))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'neidentlistnosep) in
    Obj.repr(
# 949 "oparser.mly"
    ( PVarList(_1, true) )
# 3337 "oparser.ml"
               : Ptree.crypto_transf_user_info))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'detailedinfolist) in
    Obj.repr(
# 951 "oparser.mly"
    ( PDetailed(_1) )
# 3344 "oparser.ml"
               : Ptree.crypto_transf_user_info))
(* Entry all *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry lib *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry instruct *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry cryptotransfinfo *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry term *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry allowed_coll *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let all (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ptree.decl list * Ptree.process_e)
let lib (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Ptree.decl list)
let instruct (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 3 lexfun lexbuf : Ptree.process_e)
let cryptotransfinfo (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 4 lexfun lexbuf : Ptree.crypto_transf_user_info)
let term (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 5 lexfun lexbuf : Ptree.term_e)
let allowed_coll (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 6 lexfun lexbuf : ((Ptree.ident * int) list * Ptree.ident option) list)
