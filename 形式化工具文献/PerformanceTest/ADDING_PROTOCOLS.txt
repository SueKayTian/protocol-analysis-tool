A protocol file should do the following:

- import Protocol
- use the function Protocol.register(generator) to register a protocol
  generator object
- The generator object should be an instance of a subclass of
  Protocol.Protocol
  and call
  Protocol.Protocol.__init__(self,"PROTOCOLNAME","TOOLNAME",listOfModels,listOfClaims)

  The generator should provide:

  roleCount()

  returning the cardinality of the protocol

  and

  generate(model,claim [,parameter])

  which should return

  (protocolinput,additionalargumentsfortool)

  models:

  	"Traces"	(no parameters)
	"Scen"		Scenario
	"RepScen"	Scenario
	"MaxProc"	Int count

  claims:

  (Note this is just an example of the encodings, and this is not
  strictly required, but just for easier post-processing)

  General rules:
  - Secrecy claims start with "s",
    Authentication claims start with "a"
  - Next is the role identifier for which the claim should hold at the
    end.
  - Then we have some unique identifying string if there are multiple
    ones, as descriptive as possible.

  	"sAna"		secrecy claim for role A (initiator) of the nonce generated by the same role
  	"sAnb"		secrecy claim for role A (initiator) of the received nonce 
  	"sBna"		secrecy claim for role B (responder) of the nonce generated by the same role
  	"sBnb"		secrecy claim for role B (responder) of the received nonce 
	"aA"		authentication for role A
	"aB"		authentication for role B

  Note: we use any authentication property supported, but it should at
  least be able to detect the NS-attack (so Aliveness would not be good
  enough)

