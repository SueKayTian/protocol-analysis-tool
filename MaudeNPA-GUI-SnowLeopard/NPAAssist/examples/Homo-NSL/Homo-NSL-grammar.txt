(entry tval(qidlist grammar Homo-NSL)(notes)(tval MAUDE-NPA(
grl #0:Msg inL => pk(#0:Msg,#1:Name)inL . ;
grl #0:Msg inL =>(#1:Msg ; #0:Msg)inL . ;
grl #0:Msg inL =>(#0:Msg ; #1:Msg)inL . ;
grl #0:Msg notInI, (#0:Msg notLeq pk(#1:Name,#2:Name)), (#0:Msg notLeq pk(
    #3:Nonce,#4:Name)), (#0:Msg notLeq n(#5:Name,#6:Fresh)), (#0:Msg notLeq
    #7:Name ; n(#7:Name,#8:Fresh)), #0:Msg notLeq #9:Nonce ; n(#10:Name,
    #11:Fresh); #10:Name => pk(#0:Msg,#12:Name)inL . ;
grl #0:Msg notInI, (#0:Msg notLeq pk(#1:Name,#2:Name)), (#0:Msg notLeq pk(
    #3:Nonce,#4:Name)), (#0:Msg notLeq n(#5:Name,#6:Fresh)), (#0:Msg notLeq
    #7:Name ; n(#7:Name,#8:Fresh)), #0:Msg notLeq #9:Nonce ; n(#10:Name,
    #11:Fresh); #10:Name =>(#0:Msg ; #12:Msg)inL . ;
grl #0:Msg notInI, (#0:Msg notLeq pk(#1:Name,#2:Name)), (#0:Msg notLeq pk(
    #3:Nonce,#4:Name)), (#0:Msg notLeq n(#5:Name,#6:Fresh)), (#0:Msg notLeq
    #7:Name ; n(#7:Name,#8:Fresh)), #0:Msg notLeq #9:Nonce ; n(#10:Name,
    #11:Fresh); #10:Name =>(#12:Name ; #0:Msg)inL .)
|(
grl #0:Msg inL => pk(#0:Msg,#1:Name)inL . ;
grl #0:Msg inL =>(#1:Msg ; #0:Msg)inL . ;
grl #0:Msg inL =>(#0:Msg ; #1:Msg)inL . ;
grl #0:Msg notInI, (#0:Msg notLeq pk(#1:Name,#2:Name)), (#0:Msg notLeq pk(n(
    #3:Name,#4:Fresh),#5:Name)), (#0:Msg notLeq n(#6:Name,#7:Fresh)), (#0:Msg
    notLeq pk(n(#8:Name,#9:Fresh),#10:Name); pk(#8:Name,#10:Name)), #0:Msg
    notLeq n(#11:Name,#12:Fresh); #11:Name =>(#13:Msg ; #0:Msg)inL .)
|(errorInconsistentExceptionsInGrammarRule
grl(#1:Msg ; #2:Msg)notLeq #3:Msg ; #4:Msg =>(#1:Msg ; #2:Msg)inL . inGrammar
grl #7:Msg inL => pk(#7:Msg,#4:Name)inL . ;
grl(#1:Msg ; #2:Msg)notLeq #3:Msg ; #4:Msg =>(#1:Msg ; #2:Msg)inL .)
|(errorInconsistentExceptionsInGrammarRule
grl n(#0:Name,#1:Fresh)notLeq #1:Nonce => n(#0:Name,#1:Fresh)inL . inGrammar
grl #0:Msg inL =>(#1:Msg ; #0:Msg)inL . ;
grl #0:Msg inL =>(#0:Msg ; #1:Msg)inL . ;
grl #5:Msg inL => pk(#5:Msg,#3:Name)inL . ;
grl n(#0:Name,#1:Fresh)notLeq #1:Nonce => n(#0:Name,#1:Fresh)inL .)
|(
grl #0:Msg inL => pk(#0:Msg,#1:Name)inL . ;
grl #0:Msg inL =>(#1:Msg ; #0:Msg)inL . ;
grl #0:Msg inL =>(#0:Msg ; #1:Msg)inL . ;
grl #0:Msg notInI, (#0:Msg notLeq #1:Nonce), (#0:Msg notLeq #2:Name ; n(
    #2:Name,#3:Fresh)), #0:Msg notLeq #4:Nonce ; n(#5:Name,#6:Fresh); #5:Name
    => pk(#0:Msg,#7:Key)inL . ;
grl #0:Msg notInI, (#0:Msg notLeq #1:Nonce), (#0:Msg notLeq #2:Name ; n(
    #2:Name,#3:Fresh)), #0:Msg notLeq #4:Nonce ; n(#5:Name,#6:Fresh); #5:Name
    =>(#7:Name ; #0:Msg)inL .)
|(errorNoHeuristicApplied{
grl #50:Key notInI => pk(#1:Msg,#50:Key)inL .,
	'#1:Msg <- '#51:Msg ;
	'#50:Key <- '#52:Key,
grl #52:Key notInI => #51:Msg inL .,none,
grl #52:Key notInI => #51:Msg inL .}usingGrammar
grl #50:Key notInI => pk(#1:Msg,#50:Key)inL .)
| errorInconsistentExceptionsInGrammarRule
grl pk(#1:Msg,#2:Key)notLeq pk(#3:Msg,#4:Key)=> pk(#1:Msg,#2:Key)inL .
    inGrammar
grl #5:Msg inL =>(#4:Msg ; #5:Msg)inL . ;
grl #5:Msg inL =>(#5:Msg ; #4:Msg)inL . ;
grl pk(#1:Msg,#2:Key)notLeq pk(#3:Msg,#4:Key)=> pk(#1:Msg,#2:Key)inL .))
