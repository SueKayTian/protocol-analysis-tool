type token =
  | CHOICE
  | STAR
  | COMMA
  | LPAREN
  | RPAREN
  | LBRACKET
  | RBRACKET
  | BAR
  | SEMI
  | NEW
  | OUT
  | IN
  | IDENT of (Pitptree.ident)
  | ATIDENT of (Pitptree.ident)
  | STRING of (Pitptree.ident)
  | INT of (int)
  | REPL
  | IF
  | THEN
  | ELSE
  | EQUAL
  | FUN
  | EQUATION
  | REDUCTION
  | PREDICATE
  | PROCESS
  | SLASH
  | DOT
  | EOF
  | LET
  | QUERY
  | BEFORE
  | PUTBEGIN
  | NONINTERF
  | EVENT
  | NOT
  | ELIMTRUE
  | FREE
  | SUCHTHAT
  | CLAUSES
  | RED
  | EQUIV
  | EQUIVEQ
  | WEDGE
  | DIFF
  | COLON
  | NOUNIF
  | PHASE
  | BARRIER
  | AMONG
  | WEAKSECRET
  | PARAM
  | ORTEXT
  | FAIL
  | GREATER
  | TYPE
  | SET
  | FORALL
  | CONST
  | INJEVENT
  | OR
  | CHANNEL
  | LETFUN
  | DEFINE
  | EXPAND
  | YIELD
  | LEQ
  | PROBA
  | LBRACE
  | RBRACE
  | PROOF
  | EQUIVALENCE
  | OTHERWISE
  | TABLE
  | INSERT
  | GET

open Parsing;;
let _ = parse_error;;
# 2 "pitparser.mly"
(*************************************************************
 *                                                           *
 *  Cryptographic protocol verifier                          *
 *                                                           *
 *  Bruno Blanchet, Vincent Cheval, and Marc Sylvestre       *
 *                                                           *
 *  Copyright (C) INRIA, CNRS 2000-2017                      *
 *                                                           *
 *************************************************************)

(*

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details (in file LICENSE).

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

*)
# 31 "pitparser.mly"

open Parsing_helper
open Ptree
open Pitptree
exception Syntax

# 117 "pitparser.ml"
let yytransl_const = [|
  257 (* CHOICE *);
  258 (* STAR *);
  259 (* COMMA *);
  260 (* LPAREN *);
  261 (* RPAREN *);
  262 (* LBRACKET *);
  263 (* RBRACKET *);
  264 (* BAR *);
  265 (* SEMI *);
  266 (* NEW *);
  267 (* OUT *);
  268 (* IN *);
  273 (* REPL *);
  274 (* IF *);
  275 (* THEN *);
  276 (* ELSE *);
  277 (* EQUAL *);
  278 (* FUN *);
  279 (* EQUATION *);
  280 (* REDUCTION *);
  281 (* PREDICATE *);
  282 (* PROCESS *);
  283 (* SLASH *);
  284 (* DOT *);
    0 (* EOF *);
  285 (* LET *);
  286 (* QUERY *);
  287 (* BEFORE *);
  288 (* PUTBEGIN *);
  289 (* NONINTERF *);
  290 (* EVENT *);
  291 (* NOT *);
  292 (* ELIMTRUE *);
  293 (* FREE *);
  294 (* SUCHTHAT *);
  295 (* CLAUSES *);
  296 (* RED *);
  297 (* EQUIV *);
  298 (* EQUIVEQ *);
  299 (* WEDGE *);
  300 (* DIFF *);
  301 (* COLON *);
  302 (* NOUNIF *);
  303 (* PHASE *);
  304 (* BARRIER *);
  305 (* AMONG *);
  306 (* WEAKSECRET *);
  307 (* PARAM *);
  308 (* ORTEXT *);
  309 (* FAIL *);
  310 (* GREATER *);
  311 (* TYPE *);
  312 (* SET *);
  313 (* FORALL *);
  314 (* CONST *);
  315 (* INJEVENT *);
  316 (* OR *);
  317 (* CHANNEL *);
  318 (* LETFUN *);
  319 (* DEFINE *);
  320 (* EXPAND *);
  321 (* YIELD *);
  322 (* LEQ *);
  323 (* PROBA *);
  324 (* LBRACE *);
  325 (* RBRACE *);
  326 (* PROOF *);
  327 (* EQUIVALENCE *);
  328 (* OTHERWISE *);
  329 (* TABLE *);
  330 (* INSERT *);
  331 (* GET *);
    0|]

let yytransl_block = [|
  269 (* IDENT *);
  270 (* ATIDENT *);
  271 (* STRING *);
  272 (* INT *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\001\000\001\000\
\024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\025\000\025\000\021\000\021\000\006\000\006\000\011\000\011\000\
\026\000\026\000\026\000\016\000\016\000\027\000\027\000\008\000\
\008\000\007\000\007\000\028\000\028\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\030\000\
\030\000\029\000\029\000\031\000\031\000\019\000\019\000\018\000\
\018\000\032\000\032\000\032\000\020\000\020\000\020\000\020\000\
\020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
\020\000\020\000\020\000\020\000\020\000\020\000\035\000\035\000\
\033\000\033\000\036\000\036\000\036\000\036\000\034\000\034\000\
\017\000\017\000\017\000\017\000\039\000\039\000\040\000\040\000\
\037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
\042\000\042\000\038\000\038\000\043\000\043\000\043\000\043\000\
\041\000\041\000\044\000\044\000\022\000\022\000\014\000\014\000\
\045\000\045\000\046\000\046\000\009\000\009\000\010\000\010\000\
\012\000\012\000\047\000\047\000\047\000\047\000\023\000\023\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\049\000\049\000\053\000\053\000\050\000\050\000\051\000\051\000\
\051\000\051\000\051\000\054\000\054\000\052\000\052\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\055\000\
\055\000\048\000\048\000\056\000\056\000\057\000\057\000\003\000\
\003\000\003\000\004\000\004\000\000\000\000\000\000\000\000\000\
\000\000"

let yylen = "\002\000\
\005\000\010\000\012\000\005\000\007\000\005\000\004\000\007\000\
\008\000\005\000\007\000\006\000\009\000\006\000\009\000\006\000\
\006\000\006\000\006\000\004\000\006\000\004\000\006\000\004\000\
\004\000\006\000\004\000\005\000\004\000\005\000\006\000\004\000\
\004\000\007\000\003\000\009\000\007\000\000\000\004\000\005\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\002\000\001\000\003\000\003\000\000\000\003\000\001\000\
\000\000\002\000\003\000\005\000\003\000\003\000\000\000\001\000\
\001\000\001\000\000\000\003\000\001\000\001\000\004\000\006\000\
\001\000\003\000\003\000\004\000\003\000\003\000\003\000\003\000\
\001\000\001\000\000\000\005\000\001\000\003\000\001\000\003\000\
\001\000\001\000\004\000\004\000\004\000\001\000\006\000\006\000\
\003\000\003\000\004\000\003\000\003\000\006\000\004\000\004\000\
\004\000\003\000\003\000\005\000\002\000\006\000\003\000\001\000\
\001\000\000\000\006\000\004\000\005\000\003\000\001\000\000\000\
\006\000\006\000\002\000\006\000\002\000\000\000\002\000\000\000\
\004\000\006\000\001\000\003\000\005\000\002\000\002\000\006\000\
\003\000\001\000\001\000\000\000\006\000\004\000\005\000\003\000\
\001\000\000\000\003\000\005\000\003\000\001\000\001\000\000\000\
\003\000\000\000\006\000\005\000\005\000\004\000\006\000\004\000\
\004\000\006\000\003\000\001\000\003\000\003\000\004\000\003\000\
\003\000\001\000\004\000\002\000\005\000\001\000\001\000\006\000\
\005\000\007\000\007\000\004\000\007\000\004\000\007\000\006\000\
\007\000\009\000\003\000\007\000\004\000\003\000\003\000\006\000\
\002\000\000\000\002\000\000\000\002\000\000\000\001\000\003\000\
\003\000\004\000\002\000\003\000\001\000\001\000\000\000\004\000\
\006\000\001\000\003\000\003\000\004\000\003\000\003\000\007\000\
\004\000\006\000\006\000\008\000\006\000\008\000\003\000\003\000\
\001\000\001\000\000\000\001\000\001\000\003\000\003\000\000\000\
\001\000\003\000\003\000\001\000\002\000\002\000\002\000\002\000\
\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\237\000\
\000\000\238\000\228\000\229\000\239\000\000\000\000\000\000\000\
\240\000\000\000\000\000\000\000\000\000\070\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\082\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\113\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\035\000\000\000\000\000\000\000\000\000\123\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\044\000\048\000\041\000\
\042\000\043\000\047\000\045\000\046\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\174\000\000\000\
\000\000\000\000\000\000\000\000\000\000\175\000\000\000\000\000\
\000\000\000\000\000\000\231\000\234\000\235\000\000\000\000\000\
\079\000\000\000\000\000\000\000\000\000\075\000\000\000\064\000\
\065\000\000\000\000\000\066\000\062\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\151\000\000\000\000\000\
\000\000\107\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\022\000\000\000\000\000\
\000\000\098\000\000\000\088\000\000\000\000\000\000\000\024\000\
\086\000\000\000\007\000\000\000\027\000\000\000\032\000\000\000\
\149\000\055\000\000\000\153\000\000\000\000\000\000\000\000\000\
\168\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\139\000\127\000\000\000\000\000\000\000\000\000\020\000\
\025\000\000\000\000\000\000\000\000\000\000\000\000\000\033\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\029\000\000\000\050\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\172\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\039\000\000\000\000\000\080\000\071\000\
\076\000\000\000\000\000\053\000\006\000\000\000\004\000\000\000\
\000\000\010\000\000\000\000\000\000\000\111\000\000\000\000\000\
\000\000\119\000\000\000\000\000\000\000\091\000\092\000\103\000\
\099\000\104\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\167\000\000\000\
\135\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\028\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\226\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\030\000\052\000\000\000\169\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\206\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\190\000\000\000\191\000\000\000\000\000\000\000\040\000\
\000\000\000\000\068\000\000\000\000\000\000\000\000\000\012\000\
\000\000\000\000\000\000\108\000\000\000\060\000\000\000\000\000\
\021\000\084\000\023\000\000\000\026\000\148\000\031\000\000\000\
\000\000\132\000\000\000\000\000\000\000\137\000\000\000\000\000\
\000\000\000\000\019\000\016\000\017\000\018\000\000\000\000\000\
\000\000\000\000\223\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\014\000\000\000\212\000\000\000\000\000\000\000\
\000\000\058\000\000\000\000\000\000\000\000\000\171\000\000\000\
\000\000\000\000\000\000\201\000\000\000\000\000\000\000\000\000\
\000\000\189\000\000\000\000\000\000\000\000\000\072\000\000\000\
\162\000\159\000\000\000\000\000\102\000\000\000\000\000\095\000\
\000\000\096\000\008\000\034\000\000\000\000\000\000\000\000\000\
\145\000\129\000\000\000\125\000\122\000\121\000\124\000\005\000\
\000\000\000\000\224\000\000\000\208\000\000\000\000\000\000\000\
\213\000\000\000\037\000\011\000\059\000\000\000\000\000\000\000\
\173\000\000\000\177\000\200\000\204\000\202\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\009\000\000\000\
\000\000\000\000\000\000\000\000\000\000\133\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\176\000\000\000\
\000\000\000\000\000\000\000\000\000\000\192\000\184\000\000\000\
\000\000\000\000\000\000\000\000\000\000\013\000\117\000\000\000\
\130\000\000\000\000\000\136\000\015\000\209\000\000\000\000\000\
\000\000\000\000\036\000\179\000\178\000\183\000\181\000\188\000\
\000\000\000\000\185\000\000\000\000\000\002\000\115\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\143\000\
\000\000\000\000\000\000\186\000\003\000\000\000\141\000\000\000\
\157\000\000\000\000\000\000\000\000\000\155\000"

let yydgoto = "\006\000\
\032\000\033\000\037\000\041\000\109\000\122\000\234\000\235\000\
\107\002\052\000\082\000\050\000\217\000\245\000\155\001\066\000\
\090\000\067\000\072\000\132\000\198\000\246\000\084\000\199\000\
\200\000\176\001\051\000\236\000\110\000\111\000\073\000\069\000\
\133\000\113\001\134\000\114\001\040\001\041\001\232\001\174\000\
\040\002\042\001\041\002\080\000\085\000\153\002\171\000\156\001\
\194\001\067\002\183\001\184\001\106\002\185\001\157\001\038\000\
\039\000"

let yysindex = "\029\003\
\201\005\201\005\239\000\054\255\216\255\000\000\118\255\103\255\
\103\255\016\000\035\000\152\255\045\000\077\000\042\001\017\000\
\083\000\117\255\011\255\091\000\083\000\104\000\115\000\083\000\
\083\000\129\000\138\000\143\000\154\000\151\255\159\000\000\000\
\004\255\000\000\000\000\000\000\000\000\210\255\092\000\128\000\
\000\000\186\000\216\255\184\000\225\000\000\000\166\004\238\000\
\247\000\241\000\216\255\241\000\216\255\053\000\116\255\002\001\
\071\001\254\000\072\255\001\001\096\255\037\001\040\001\041\001\
\049\001\047\001\022\001\043\003\056\001\073\000\069\001\060\001\
\089\001\199\255\087\001\199\001\083\255\234\003\088\001\099\001\
\101\001\062\001\115\001\201\005\216\255\029\255\119\001\108\001\
\130\001\117\001\118\001\241\000\241\000\122\001\102\001\120\001\
\192\255\146\001\152\001\129\001\005\003\154\001\101\005\101\005\
\239\000\239\000\054\255\216\255\228\255\158\001\000\000\216\255\
\216\255\216\255\216\255\216\255\216\255\039\255\114\001\170\001\
\083\000\150\001\236\004\155\001\100\005\039\255\156\001\115\001\
\101\005\071\001\178\001\034\255\182\001\000\000\183\001\071\001\
\039\255\167\001\151\001\171\001\071\001\071\001\071\001\071\001\
\101\000\201\005\071\001\071\001\071\001\071\001\071\001\101\000\
\195\001\208\001\201\005\208\001\039\255\201\005\071\001\201\005\
\039\255\201\005\216\255\115\001\083\000\039\255\181\001\219\001\
\000\000\206\004\214\255\031\006\217\001\000\000\213\001\031\006\
\022\255\201\005\201\005\207\001\221\001\046\001\039\255\201\005\
\115\001\024\006\039\255\039\255\201\005\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\172\001\005\003\227\001\
\039\255\101\005\234\001\247\001\248\001\250\001\000\000\167\005\
\024\006\111\255\244\001\242\001\006\002\000\000\025\002\027\002\
\014\000\116\005\210\255\000\000\000\000\000\000\137\000\216\255\
\000\000\255\001\030\001\002\002\172\255\000\000\166\004\000\000\
\000\000\042\002\045\002\000\000\000\000\043\002\201\005\216\255\
\201\005\216\255\044\002\201\005\047\002\000\000\174\255\072\000\
\071\001\000\000\146\000\048\002\053\002\071\001\083\000\083\000\
\052\002\058\255\054\002\230\000\030\002\000\000\020\002\110\005\
\023\000\000\000\110\005\000\000\216\255\018\002\051\002\000\000\
\000\000\075\002\000\000\239\005\000\000\031\002\000\000\015\004\
\000\000\000\000\241\000\000\000\216\255\216\255\216\255\117\255\
\000\000\078\002\072\002\031\006\080\002\093\002\087\002\111\002\
\110\002\000\000\000\000\031\006\112\002\045\255\088\002\000\000\
\000\000\201\005\201\005\090\002\094\002\098\002\241\000\000\000\
\122\002\124\002\024\006\115\002\127\002\024\006\111\255\130\002\
\103\004\131\002\132\002\000\000\201\005\000\000\005\003\136\002\
\074\000\129\002\024\006\024\006\024\006\015\255\000\000\196\001\
\030\000\123\255\024\006\104\002\123\002\169\000\134\002\079\000\
\144\002\147\002\101\005\000\000\020\000\216\255\000\000\000\000\
\000\000\128\002\039\255\000\000\000\000\041\255\000\000\062\255\
\241\000\000\000\143\002\201\005\071\001\000\000\146\002\141\002\
\161\002\000\000\133\002\247\000\066\000\000\000\000\000\000\000\
\000\000\000\000\135\002\201\005\169\002\201\005\149\002\201\005\
\138\002\201\005\153\002\166\004\166\004\166\004\000\000\031\006\
\000\000\170\002\177\002\031\006\165\002\031\006\151\002\176\002\
\151\002\201\005\000\000\000\000\201\005\201\005\201\005\166\002\
\172\002\024\006\168\000\196\002\000\000\129\002\024\006\019\003\
\174\002\197\002\024\006\024\006\201\005\024\006\024\006\024\006\
\145\002\191\002\000\000\000\000\199\002\000\000\051\255\179\002\
\026\001\039\001\220\002\232\002\101\005\125\255\243\002\242\002\
\000\000\030\000\039\255\206\000\024\006\024\006\024\006\134\002\
\101\005\000\000\236\002\000\000\024\006\030\000\244\002\000\000\
\171\002\039\255\000\000\103\255\103\255\222\002\101\005\000\000\
\227\002\071\001\230\002\000\000\240\002\000\000\071\001\245\002\
\000\000\000\000\000\000\201\005\000\000\000\000\000\000\201\005\
\001\003\000\000\153\000\004\003\031\006\000\000\246\002\241\002\
\022\255\241\002\000\000\000\000\000\000\000\000\201\005\024\006\
\169\001\024\006\000\000\224\002\014\003\024\006\024\006\024\006\
\000\002\247\002\000\000\140\000\000\000\144\005\201\005\201\005\
\201\005\000\000\017\003\039\255\024\006\030\000\000\000\101\005\
\202\255\039\255\030\000\000\000\023\003\053\002\104\255\077\001\
\025\003\000\000\244\002\030\003\034\003\046\003\000\000\068\000\
\000\000\000\000\201\005\193\255\000\000\011\004\071\001\000\000\
\043\003\000\000\000\000\000\000\031\006\035\003\044\003\060\003\
\000\000\000\000\056\003\000\000\000\000\000\000\000\000\000\000\
\136\004\024\006\000\000\039\255\000\000\069\002\201\003\023\004\
\000\000\000\003\000\000\000\000\000\000\134\002\119\002\065\003\
\000\000\101\005\000\000\000\000\000\000\000\000\101\005\101\005\
\129\002\134\002\134\002\137\255\117\255\045\003\000\000\201\005\
\146\000\185\005\069\003\031\006\051\003\000\000\031\006\201\005\
\015\003\068\003\024\006\024\006\024\006\201\005\000\000\134\002\
\134\002\244\002\202\255\202\255\134\002\000\000\000\000\101\005\
\024\006\058\003\241\000\216\255\201\005\000\000\000\000\146\000\
\000\000\071\003\031\006\000\000\000\000\000\000\024\006\144\005\
\099\003\127\003\000\000\000\000\000\000\000\000\000\000\000\000\
\244\002\070\004\000\000\053\003\232\005\000\000\000\000\153\000\
\073\003\144\005\024\006\024\006\058\003\201\005\216\255\000\000\
\153\000\144\005\144\005\000\000\000\000\001\255\000\000\117\255\
\000\000\216\255\234\005\216\255\001\255\000\000"

let yyrindex = "\000\000\
\021\255\083\004\088\004\000\000\000\000\000\000\000\000\210\001\
\210\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\038\002\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\089\004\090\004\
\000\000\000\000\087\003\050\005\000\000\000\000\094\004\000\000\
\000\000\067\003\000\000\067\003\000\000\067\003\000\000\000\000\
\102\003\000\000\215\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\219\255\081\003\186\255\000\000\000\000\
\082\003\000\000\000\000\000\000\216\004\000\000\000\000\182\000\
\178\002\000\000\000\000\012\000\000\000\085\003\000\000\000\000\
\000\000\000\000\000\000\067\003\067\003\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\088\004\000\000\000\000\109\003\000\000\000\000\087\003\
\000\000\000\000\000\000\000\000\000\000\110\003\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\110\003\000\000\113\003\
\000\000\000\000\164\255\116\003\000\000\000\000\134\000\102\003\
\000\000\000\000\000\000\000\000\102\003\000\000\102\003\000\000\
\000\000\012\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\012\000\000\000\110\003\012\000\000\000\012\000\
\000\000\012\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\235\255\000\000\118\003\000\000\000\000\000\000\118\003\
\000\000\012\000\012\000\000\000\000\000\000\000\000\000\012\000\
\113\003\000\000\110\003\110\003\012\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\027\255\059\003\
\110\003\000\000\000\000\000\000\000\000\172\003\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\010\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\169\003\097\005\000\000\005\000\000\000\
\000\000\000\000\122\003\000\000\000\000\000\000\012\000\000\000\
\012\000\000\000\000\000\012\000\000\000\000\000\000\000\000\000\
\000\000\000\000\123\003\000\000\032\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\190\005\042\006\
\227\255\000\000\124\001\000\000\000\000\186\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\190\000\000\000\000\000\
\000\000\000\000\067\003\000\000\000\000\000\000\000\000\038\002\
\000\000\000\000\000\000\118\003\000\000\020\003\000\000\135\003\
\000\000\000\000\000\000\000\000\000\000\085\003\000\000\000\000\
\000\000\012\000\012\000\000\000\000\000\000\000\067\003\000\000\
\000\000\000\000\139\003\000\000\197\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\012\000\000\000\000\000\000\000\
\000\000\100\003\000\000\000\000\139\003\172\003\000\000\000\000\
\141\003\130\003\000\000\000\000\000\000\088\003\121\003\121\003\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\091\255\000\000\166\255\
\067\003\000\000\000\000\012\000\000\000\000\000\000\000\000\000\
\000\000\000\000\241\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\185\004\012\000\000\000\012\000\000\000\012\000\
\000\000\012\000\000\000\237\255\245\255\033\000\000\000\000\000\
\000\000\000\000\149\003\118\003\000\000\000\000\249\000\000\000\
\249\000\012\000\000\000\000\000\012\000\012\000\012\000\000\000\
\000\000\000\000\158\001\000\000\000\000\100\003\139\003\000\000\
\000\000\000\000\000\000\000\000\012\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\193\000\155\003\000\000\
\000\000\141\003\000\000\234\000\000\000\000\000\139\003\121\003\
\000\000\000\000\000\000\000\000\139\003\141\003\222\003\000\000\
\000\000\000\000\000\000\210\001\210\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\012\000\000\000\000\000\000\000\012\000\
\000\000\000\000\157\003\000\000\000\000\000\000\000\000\085\003\
\000\000\085\003\000\000\000\000\000\000\000\000\012\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\020\001\000\000\106\001\000\000\157\001\096\003\012\000\
\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\034\005\000\000\000\000\000\000\000\000\142\255\255\003\052\004\
\000\000\000\000\091\004\000\000\000\000\000\000\000\000\067\003\
\000\000\000\000\012\000\000\000\000\000\159\003\000\000\000\000\
\043\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\142\002\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\121\003\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\037\003\121\003\121\003\124\004\038\002\000\000\000\000\012\000\
\000\000\160\003\000\000\000\000\000\000\000\000\000\000\012\000\
\000\000\000\000\000\000\000\000\000\000\012\000\000\000\121\003\
\121\003\157\004\034\005\034\005\121\003\000\000\000\000\000\000\
\000\000\207\004\067\003\000\000\012\000\000\000\000\000\000\000\
\000\000\166\003\000\000\000\000\000\000\000\000\000\000\190\001\
\192\002\225\002\000\000\000\000\000\000\000\000\000\000\000\000\
\001\005\124\004\000\000\000\000\000\000\000\000\000\000\000\000\
\174\003\007\002\000\000\000\000\207\004\012\000\000\000\000\000\
\000\000\058\002\091\002\000\000\000\000\048\000\000\000\038\002\
\000\000\000\000\000\000\000\000\125\000\000\000"

let yygindex = "\000\000\
\000\000\255\255\073\004\084\004\251\255\206\255\159\255\134\255\
\000\000\249\002\001\000\251\002\161\255\008\004\129\255\008\000\
\087\255\108\000\168\255\247\255\131\003\015\000\162\003\000\000\
\004\004\186\254\254\255\105\003\093\004\086\255\000\000\000\000\
\011\001\000\000\215\003\213\253\225\254\108\255\070\003\088\000\
\000\000\072\003\173\253\000\000\197\253\059\002\000\000\211\254\
\254\254\100\254\063\255\093\255\095\002\206\002\235\002\113\004\
\118\004"

let yytablesize = 1863
let yytable = "\047\000\
\034\000\124\000\068\000\127\000\077\000\076\000\053\000\047\001\
\218\000\230\000\078\000\038\000\144\001\092\001\253\000\192\001\
\085\001\108\002\077\001\200\001\071\000\092\000\075\000\086\000\
\095\000\096\000\089\000\045\001\243\000\103\000\079\000\179\001\
\172\000\247\000\046\001\049\000\249\000\111\002\022\001\087\000\
\061\000\180\000\181\000\027\001\116\000\123\000\038\000\125\000\
\172\000\204\001\087\000\232\000\144\002\095\001\147\000\173\000\
\120\000\002\002\065\001\018\001\055\001\151\002\121\001\081\000\
\148\000\015\001\040\000\017\001\135\002\061\000\205\001\173\000\
\152\002\137\000\104\000\136\000\149\000\150\000\147\000\170\000\
\180\001\080\001\169\000\088\000\116\000\196\001\112\000\244\001\
\148\000\066\001\067\001\038\000\154\002\151\000\088\000\049\000\
\161\000\168\000\125\001\233\000\149\000\150\000\223\000\072\001\
\225\001\116\000\073\001\227\000\228\000\229\000\230\000\231\000\
\079\001\245\001\081\001\071\002\137\000\151\000\161\000\128\000\
\248\000\238\000\093\001\082\001\164\001\162\001\186\001\161\000\
\186\001\139\000\048\000\083\001\002\001\074\000\004\001\068\000\
\129\000\007\001\008\001\009\001\010\001\011\001\068\000\138\001\
\006\001\017\002\166\001\167\001\104\002\020\001\074\000\021\002\
\056\000\016\001\140\000\057\000\019\001\024\001\021\001\049\000\
\023\001\058\000\200\000\168\001\059\000\026\001\094\000\187\001\
\094\000\010\002\094\000\160\000\094\000\083\000\105\002\094\000\
\048\001\049\001\025\001\061\000\060\000\091\001\056\001\061\000\
\094\000\062\000\063\000\068\001\085\000\018\002\160\001\094\000\
\114\000\160\000\094\000\185\000\210\000\043\002\126\002\127\002\
\091\001\108\001\157\000\177\001\178\001\131\002\094\000\094\000\
\074\000\091\001\064\000\188\001\186\000\085\000\115\000\116\000\
\042\000\084\001\101\000\043\000\080\002\066\002\032\001\094\000\
\065\000\074\000\158\000\090\000\044\000\101\000\224\000\101\000\
\131\001\101\000\102\001\101\000\104\001\101\001\101\000\103\001\
\148\002\033\001\106\001\164\000\117\001\163\000\090\000\228\001\
\114\000\105\000\045\000\199\001\005\001\165\000\101\000\118\001\
\119\001\101\000\101\002\012\001\152\001\083\002\164\000\077\000\
\163\000\077\000\077\000\077\000\046\000\077\000\115\000\116\000\
\165\000\042\000\230\000\211\000\043\000\091\001\013\002\132\001\
\133\001\134\001\241\001\091\001\054\000\077\000\101\000\117\000\
\077\000\081\001\022\002\249\001\250\001\038\000\252\001\253\001\
\254\001\166\000\182\001\147\000\077\000\077\000\077\000\055\000\
\147\001\148\001\083\001\045\000\114\002\158\000\206\001\116\002\
\126\000\070\000\121\000\095\002\166\000\015\002\016\002\046\002\
\014\002\149\000\150\000\171\001\064\002\046\000\161\001\102\002\
\103\002\121\000\109\001\158\000\077\000\215\001\174\001\024\002\
\038\000\091\001\038\000\137\002\195\001\009\002\147\000\193\001\
\201\001\074\000\074\000\077\002\147\000\124\002\125\002\081\000\
\148\000\019\002\128\002\209\001\106\000\056\000\148\000\091\000\
\057\000\215\000\208\001\074\000\149\000\150\000\058\000\028\002\
\049\002\131\000\149\000\150\000\093\000\137\000\054\002\055\002\
\056\002\153\000\217\001\214\001\219\001\151\000\221\001\094\000\
\223\001\060\000\156\000\151\000\061\000\063\002\062\000\063\000\
\109\000\062\002\109\000\094\001\109\000\097\000\109\000\068\002\
\235\001\109\000\252\000\236\001\237\001\238\001\098\000\001\001\
\156\000\003\001\109\000\099\000\214\000\114\000\111\001\064\000\
\164\001\109\000\112\001\251\001\109\000\038\002\100\000\074\000\
\065\002\039\002\242\001\102\000\191\001\065\000\175\001\003\002\
\109\000\109\000\089\002\115\000\116\000\107\000\166\001\167\001\
\074\000\090\002\150\000\112\000\164\001\218\000\150\000\108\000\
\147\000\109\000\147\000\199\000\117\000\199\000\147\000\210\000\
\030\002\210\000\053\000\210\000\210\000\033\002\210\000\210\000\
\210\000\210\000\166\001\167\001\210\000\210\000\210\000\210\000\
\210\000\210\000\035\002\120\002\121\002\122\002\036\002\094\000\
\210\000\210\000\098\002\168\001\113\000\078\002\210\000\099\002\
\100\002\130\002\123\001\094\000\203\000\048\002\203\000\210\000\
\210\000\118\000\094\000\210\000\210\000\094\000\121\000\138\002\
\166\001\167\001\147\000\035\000\036\000\058\002\059\002\060\002\
\210\000\094\000\094\000\119\000\148\000\210\000\216\000\130\000\
\129\002\168\001\135\000\146\002\147\002\138\000\210\000\210\000\
\149\000\150\000\094\000\126\000\126\000\082\002\211\000\211\000\
\211\000\079\002\211\000\211\000\005\002\211\000\211\000\211\000\
\211\000\151\000\097\001\211\000\211\000\211\000\211\000\211\000\
\141\000\006\002\056\000\142\000\143\000\057\000\164\001\211\000\
\211\000\146\000\114\000\058\000\144\000\211\000\059\000\145\000\
\132\002\222\000\052\001\164\001\053\001\054\001\211\000\045\002\
\152\000\047\002\211\000\211\000\166\001\167\001\060\000\056\000\
\115\000\116\000\057\000\062\000\063\000\154\000\110\002\211\000\
\058\000\166\001\167\001\131\000\211\000\168\001\117\002\155\000\
\072\002\117\000\220\000\156\000\123\002\211\000\211\000\159\000\
\163\000\164\001\168\001\060\000\064\000\164\000\133\002\165\000\
\062\000\063\000\166\000\134\002\215\000\215\000\215\000\176\000\
\215\000\215\000\065\000\215\000\215\000\215\000\215\000\166\001\
\167\001\215\000\215\000\215\000\215\000\215\000\100\000\167\000\
\100\000\064\000\100\000\175\000\100\000\215\000\215\000\100\000\
\168\001\150\002\177\000\215\000\149\002\217\000\182\000\065\000\
\178\000\179\000\183\000\184\000\155\002\187\000\157\002\100\000\
\215\000\215\000\100\000\188\000\189\000\201\000\137\000\214\000\
\214\000\214\000\225\000\214\000\214\000\215\000\214\000\214\000\
\214\000\214\000\215\000\050\002\214\000\214\000\214\000\214\000\
\214\000\239\000\237\000\215\000\215\000\136\000\241\000\244\000\
\214\000\214\000\250\000\254\000\251\000\164\001\214\000\221\000\
\218\000\218\000\218\000\255\000\218\000\218\000\013\001\218\000\
\218\000\218\000\218\000\214\000\214\000\218\000\218\000\218\000\
\218\000\218\000\063\000\166\001\167\001\063\000\181\001\000\001\
\164\001\218\000\218\000\147\000\014\001\214\000\063\000\218\000\
\219\000\161\000\160\000\028\001\168\001\148\000\214\000\214\000\
\043\001\044\001\050\001\071\001\218\000\218\000\166\001\167\001\
\069\001\149\000\150\000\093\000\063\000\093\000\074\001\093\000\
\051\001\093\000\075\001\076\001\093\000\077\001\218\000\168\001\
\086\001\087\001\151\000\096\001\057\002\093\000\063\000\218\000\
\218\000\216\000\216\000\216\000\093\000\216\000\216\000\093\000\
\216\000\216\000\216\000\216\000\164\001\088\001\216\000\216\000\
\216\000\216\000\216\000\093\000\093\000\001\000\002\000\003\000\
\004\000\005\000\216\000\216\000\057\000\089\001\154\000\090\001\
\216\000\154\000\166\001\167\001\093\000\116\000\098\001\099\001\
\105\001\100\001\154\000\107\001\115\001\216\000\216\000\116\001\
\120\001\124\001\122\001\168\001\222\000\222\000\222\000\150\000\
\222\000\222\000\153\000\222\000\222\000\222\000\222\000\216\000\
\154\000\222\000\222\000\222\000\222\000\222\000\126\001\127\001\
\216\000\216\000\129\001\136\001\137\001\222\000\222\000\057\000\
\091\002\164\001\154\000\222\000\139\001\220\000\220\000\220\000\
\140\001\220\000\220\000\141\001\220\000\220\000\220\000\220\000\
\222\000\222\000\220\000\220\000\220\000\220\000\220\000\166\001\
\167\001\142\001\143\001\146\001\145\001\149\001\220\000\220\000\
\194\000\150\001\222\000\096\002\220\000\151\001\153\001\158\001\
\168\001\154\001\159\001\222\000\222\000\163\001\175\001\169\001\
\170\001\220\000\220\000\164\001\173\001\189\001\193\001\190\001\
\217\000\217\000\217\000\197\001\217\000\217\000\198\001\217\000\
\217\000\217\000\217\000\220\000\211\001\217\000\217\000\217\000\
\217\000\166\001\167\001\207\001\220\000\220\000\210\001\212\001\
\074\000\217\000\217\000\170\000\202\001\218\001\226\001\217\000\
\220\001\023\002\168\001\213\001\224\001\216\001\227\001\056\000\
\056\000\229\001\056\000\233\001\217\000\217\000\222\001\114\000\
\240\001\239\001\221\000\221\000\221\000\231\001\221\000\221\000\
\243\001\221\000\221\000\221\000\221\000\056\000\217\000\221\000\
\221\000\221\000\221\000\247\001\255\001\115\000\116\000\217\000\
\217\000\248\001\000\002\221\000\221\000\187\000\056\000\004\002\
\007\002\221\000\001\002\219\000\219\000\219\000\117\000\219\000\
\219\000\029\002\219\000\219\000\219\000\219\000\221\000\221\000\
\219\000\219\000\219\000\219\000\008\002\011\002\012\002\147\000\
\020\002\027\002\031\002\091\001\219\000\219\000\182\000\032\002\
\221\000\148\000\219\000\037\002\034\002\044\002\190\000\191\000\
\042\002\221\000\221\000\173\000\052\002\149\000\150\000\219\000\
\219\000\192\000\053\002\193\000\194\000\118\002\131\000\061\002\
\131\000\195\000\131\000\070\002\131\000\073\002\151\000\131\000\
\196\000\219\000\167\001\164\001\074\002\246\001\075\002\164\001\
\057\000\057\000\219\000\219\000\057\000\057\000\057\000\057\000\
\057\000\057\000\076\002\180\000\057\000\057\000\057\000\084\002\
\057\000\166\001\167\001\085\002\197\000\166\001\167\001\147\000\
\057\000\057\000\086\002\087\002\094\002\097\002\057\000\115\002\
\109\002\148\000\168\001\113\002\119\002\066\002\168\001\136\002\
\142\002\145\002\038\000\057\000\057\000\149\000\150\000\232\000\
\233\000\236\000\193\000\083\000\057\000\241\000\054\000\057\000\
\057\000\057\000\057\000\057\000\057\000\057\000\151\000\057\000\
\057\000\057\000\114\000\057\000\089\000\087\000\057\000\057\000\
\128\000\081\000\067\000\057\000\057\000\152\000\139\002\164\001\
\112\000\057\000\140\000\196\000\194\000\194\000\069\000\051\000\
\194\000\120\000\194\000\194\000\194\000\194\000\057\000\057\000\
\194\000\194\000\194\000\138\000\194\000\166\001\167\001\227\000\
\057\000\207\000\140\002\164\001\194\000\194\000\199\000\134\000\
\057\000\134\000\194\000\134\000\197\000\134\000\168\001\205\000\
\134\000\057\000\057\000\146\000\038\000\118\000\116\000\194\000\
\194\000\166\001\167\001\074\000\144\000\074\000\074\000\074\000\
\170\000\074\000\221\000\170\000\142\000\170\000\170\000\170\000\
\170\000\194\000\168\001\170\000\170\000\170\000\222\000\170\000\
\057\001\135\001\194\000\194\000\074\000\026\002\025\002\170\000\
\170\000\172\001\070\001\203\001\226\000\170\000\198\000\110\001\
\074\000\074\000\074\000\074\000\092\002\230\001\234\001\158\002\
\069\002\219\000\170\000\170\000\051\002\164\001\220\000\000\000\
\141\002\187\000\187\000\000\000\074\000\000\000\000\000\187\000\
\187\000\187\000\187\000\000\000\170\000\187\000\187\000\187\000\
\074\000\187\000\000\000\166\001\167\001\170\000\170\000\000\000\
\000\000\187\000\187\000\000\000\000\000\000\000\114\000\187\000\
\195\000\000\000\182\000\182\000\168\001\162\000\182\000\000\000\
\182\000\182\000\000\000\182\000\187\000\187\000\182\000\182\000\
\182\000\000\000\182\000\081\002\115\000\116\000\000\000\000\000\
\000\000\000\000\182\000\182\000\000\000\000\000\187\000\147\000\
\182\000\198\000\093\002\114\000\000\000\117\000\000\000\187\000\
\187\000\148\000\130\001\164\001\000\000\182\000\182\000\000\000\
\000\000\073\000\000\000\000\000\000\000\149\000\150\000\180\000\
\180\000\115\000\116\000\180\000\000\000\180\000\180\000\182\000\
\180\000\166\001\167\001\180\000\180\000\180\000\151\000\180\000\
\182\000\182\000\117\000\000\000\000\000\000\000\000\000\180\000\
\180\000\104\002\168\001\000\000\000\000\180\000\000\000\000\000\
\000\000\000\000\164\001\000\000\000\000\000\000\193\000\193\000\
\078\000\000\000\180\000\180\000\193\000\193\000\193\000\193\000\
\000\000\000\000\193\000\193\000\193\000\000\000\193\000\000\000\
\166\001\167\001\000\000\000\000\180\000\000\000\193\000\193\000\
\000\000\000\000\000\000\164\001\193\000\180\000\180\000\196\000\
\196\000\168\001\165\001\196\000\000\000\196\000\196\000\000\000\
\196\000\193\000\193\000\196\000\196\000\196\000\000\000\196\000\
\000\000\166\001\167\001\000\000\000\000\000\000\000\000\196\000\
\196\000\000\000\000\000\193\000\164\001\196\000\000\000\000\000\
\197\000\197\000\168\001\088\002\193\000\193\000\197\000\197\000\
\197\000\197\000\196\000\196\000\197\000\197\000\197\000\000\000\
\197\000\000\000\166\001\167\001\000\000\000\000\000\000\000\000\
\197\000\197\000\114\000\105\000\196\000\105\000\197\000\105\000\
\000\000\105\000\000\000\168\001\105\000\196\000\196\000\000\000\
\000\000\000\000\000\000\197\000\197\000\105\000\000\000\000\000\
\115\000\116\000\198\000\198\000\105\000\000\000\198\000\105\000\
\198\000\198\000\198\000\198\000\000\000\197\000\198\000\198\000\
\198\000\117\000\114\000\105\000\105\000\000\000\197\000\197\000\
\000\000\000\000\198\000\198\000\073\000\000\000\000\000\000\000\
\198\000\000\000\000\000\073\000\105\000\029\001\030\001\031\001\
\115\000\116\000\000\000\000\000\000\000\198\000\198\000\000\000\
\240\000\000\000\073\000\073\000\195\000\195\000\000\000\000\000\
\000\000\117\000\195\000\195\000\195\000\195\000\000\000\198\000\
\195\000\195\000\195\000\073\000\195\000\000\000\115\000\116\000\
\198\000\198\000\000\000\000\000\195\000\195\000\000\000\000\000\
\000\000\000\000\195\000\000\000\000\000\198\000\198\000\117\000\
\000\000\000\000\000\000\198\000\198\000\198\000\198\000\195\000\
\195\000\198\000\198\000\198\000\073\000\000\000\073\000\073\000\
\073\000\000\000\073\000\000\000\000\000\198\000\198\000\000\000\
\000\000\195\000\000\000\198\000\000\000\000\000\073\000\000\000\
\000\000\000\000\195\000\195\000\000\000\073\000\000\000\000\000\
\198\000\198\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\073\000\073\000\073\000\073\000\073\000\000\000\000\000\
\000\000\000\000\198\000\078\000\000\000\078\000\078\000\078\000\
\202\000\078\000\000\000\198\000\198\000\073\000\203\000\204\000\
\205\000\206\000\000\000\000\000\207\000\208\000\209\000\202\000\
\242\000\073\000\000\000\091\001\078\000\203\000\204\000\205\000\
\206\000\210\000\147\000\207\000\208\000\209\000\211\000\000\000\
\078\000\078\000\078\000\000\000\000\000\000\000\115\000\116\000\
\210\000\000\000\000\000\212\000\213\000\211\000\000\000\000\000\
\149\000\150\000\000\000\000\000\078\000\000\000\000\000\117\000\
\000\000\000\000\212\000\213\000\164\001\214\000\000\000\000\000\
\078\000\151\000\202\000\000\000\000\000\000\000\215\000\216\000\
\203\000\204\000\205\000\078\001\214\000\000\000\207\000\208\000\
\209\000\000\000\166\001\167\001\000\000\215\000\216\000\000\000\
\097\000\112\002\097\000\210\000\097\000\000\000\097\000\000\000\
\211\000\097\000\000\000\168\001\000\000\147\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\212\000\213\000\148\000\
\000\000\097\000\000\000\000\000\097\000\000\000\007\000\008\000\
\009\000\010\000\000\000\149\000\150\000\011\000\012\000\214\000\
\097\000\013\000\014\000\015\000\016\000\017\000\000\000\018\000\
\215\000\216\000\000\000\000\000\151\000\000\000\019\000\000\000\
\000\000\097\000\020\000\021\000\143\002\000\000\156\002\022\000\
\023\000\000\000\024\000\147\000\000\000\025\000\026\000\027\000\
\028\000\000\000\128\001\029\000\000\000\148\000\030\000\000\000\
\000\000\031\000\115\000\116\000\115\000\116\000\000\000\000\000\
\058\001\149\000\150\000\059\001\000\000\000\000\000\000\034\001\
\035\001\060\001\036\001\117\000\061\001\117\000\000\000\000\000\
\037\001\062\001\151\000\038\001\106\000\110\000\106\000\110\000\
\106\000\110\000\106\000\110\000\063\001\106\000\110\000\000\000\
\000\000\000\000\064\001\039\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\106\000\110\000"

let yycheck = "\005\000\
\002\000\052\000\012\000\054\000\000\000\015\000\009\000\177\000\
\104\000\000\000\016\000\000\000\044\001\000\000\137\000\086\001\
\210\000\077\002\004\001\000\000\013\000\021\000\015\000\013\001\
\024\000\025\000\019\000\176\000\126\000\026\001\016\000\077\001\
\004\001\129\000\013\001\009\001\003\001\081\002\161\000\029\001\
\009\001\092\000\093\000\166\000\044\001\051\000\026\001\053\000\
\004\001\009\001\029\001\013\001\136\002\224\000\021\001\027\001\
\049\000\007\001\186\000\157\000\183\000\145\002\005\001\013\001\
\031\001\154\000\013\001\156\000\112\002\038\001\009\001\027\001\
\072\001\045\001\071\001\004\001\043\001\044\001\021\001\085\000\
\066\001\209\000\084\000\073\001\044\001\088\001\004\001\158\001\
\031\001\187\000\188\000\071\001\152\002\060\001\073\001\069\001\
\006\001\083\000\013\001\061\001\043\001\044\001\108\000\201\000\
\136\001\044\001\202\000\113\000\114\000\115\000\116\000\117\000\
\208\000\159\001\004\001\012\001\045\001\060\001\028\001\004\001\
\130\000\121\000\218\000\013\001\021\001\063\001\004\001\045\001\
\004\001\034\001\013\001\021\001\142\000\043\001\144\000\145\000\
\021\001\147\000\148\000\149\000\150\000\151\000\152\000\036\001\
\146\000\191\001\043\001\044\001\012\001\159\000\060\001\197\001\
\001\001\155\000\059\001\004\001\158\000\163\000\160\000\057\001\
\162\000\010\001\021\001\060\001\013\001\165\000\003\001\045\001\
\005\001\045\001\007\001\006\001\009\001\057\001\038\001\012\001\
\178\000\179\000\164\000\038\001\029\001\008\001\184\000\032\001\
\021\001\034\001\035\001\189\000\003\001\192\001\062\001\028\001\
\021\001\028\001\031\001\004\001\000\000\229\001\099\002\100\002\
\008\001\028\001\004\001\075\001\076\001\106\002\043\001\044\001\
\043\001\008\001\059\001\083\001\021\001\028\001\043\001\044\001\
\001\001\210\000\068\001\004\001\028\001\020\001\009\001\060\001\
\073\001\060\001\028\001\009\001\013\001\003\001\003\001\005\001\
\027\001\007\001\240\000\009\001\242\000\239\000\012\001\241\000\
\141\002\028\001\244\000\009\001\254\000\009\001\028\001\140\001\
\021\001\040\001\035\001\091\001\145\000\009\001\028\001\255\000\
\000\001\031\001\073\002\152\000\055\001\037\002\028\001\003\001\
\028\001\005\001\006\001\007\001\053\001\009\001\043\001\044\001\
\028\001\001\001\009\001\000\000\004\001\008\001\186\001\029\001\
\030\001\031\001\154\001\008\001\013\001\013\001\060\001\060\001\
\028\001\004\001\198\001\163\001\164\001\026\001\166\001\167\001\
\168\001\009\001\013\001\021\001\040\001\041\001\042\001\013\001\
\050\001\051\001\021\001\035\001\084\002\006\001\105\001\087\002\
\004\001\013\001\006\001\062\002\028\001\189\001\190\001\233\001\
\187\001\043\001\044\001\069\001\006\002\053\001\063\001\074\002\
\075\002\006\001\003\001\028\001\072\001\012\001\005\001\202\001\
\069\001\008\001\071\001\115\002\006\001\181\001\021\001\009\001\
\094\001\013\001\043\001\024\001\021\001\096\002\097\002\013\001\
\031\001\193\001\101\002\109\001\009\001\001\001\031\001\013\001\
\004\001\000\000\108\001\060\001\043\001\044\001\010\001\207\001\
\240\001\013\001\043\001\044\001\013\001\045\001\246\001\247\001\
\248\001\049\001\124\001\116\001\126\001\060\001\128\001\013\001\
\130\001\029\001\006\001\060\001\032\001\005\002\034\001\035\001\
\003\001\004\002\005\001\003\001\007\001\013\001\009\001\010\002\
\146\001\012\001\136\000\149\001\150\001\151\001\013\001\141\000\
\028\001\143\000\021\001\013\001\000\000\021\001\013\001\059\001\
\021\001\028\001\017\001\165\001\031\001\013\001\013\001\043\001\
\008\002\017\001\003\001\013\001\004\001\073\001\006\001\175\001\
\043\001\044\001\050\002\043\001\044\001\054\001\043\001\044\001\
\060\001\052\002\005\001\004\001\021\001\000\000\009\001\006\001\
\003\001\060\001\005\001\003\001\060\001\005\001\009\001\003\001\
\210\001\005\001\205\001\007\001\008\001\215\001\010\001\011\001\
\012\001\013\001\043\001\044\001\016\001\017\001\018\001\019\001\
\020\001\021\001\220\001\091\002\092\002\093\002\224\001\009\001\
\028\001\029\001\066\002\060\001\004\001\024\002\034\001\071\002\
\072\002\105\002\005\001\021\001\003\001\239\001\005\001\043\001\
\044\001\004\001\028\001\047\001\048\001\031\001\006\001\119\002\
\043\001\044\001\021\001\013\001\014\001\255\001\000\002\001\002\
\060\001\043\001\044\001\013\001\031\001\065\001\000\000\006\001\
\104\002\060\001\013\001\139\002\140\002\013\001\074\001\075\001\
\043\001\044\001\060\001\027\001\028\001\031\002\003\001\004\001\
\005\001\027\002\007\001\008\001\003\001\010\001\011\001\012\001\
\013\001\060\001\005\001\016\001\017\001\018\001\019\001\020\001\
\004\001\003\001\001\001\004\001\004\001\004\001\021\001\028\001\
\029\001\028\001\021\001\010\001\004\001\034\001\013\001\009\001\
\107\002\000\000\013\001\021\001\015\001\016\001\043\001\232\001\
\009\001\234\001\047\001\048\001\043\001\044\001\029\001\001\001\
\043\001\044\001\004\001\034\001\035\001\009\001\080\002\060\001\
\010\001\043\001\044\001\013\001\065\001\060\001\088\002\028\001\
\012\001\060\001\000\000\003\001\094\002\074\001\075\001\009\001\
\009\001\021\001\060\001\029\001\059\001\003\001\108\002\003\001\
\034\001\035\001\045\001\109\002\003\001\004\001\005\001\004\001\
\007\001\008\001\073\001\010\001\011\001\012\001\013\001\043\001\
\044\001\016\001\017\001\018\001\019\001\020\001\003\001\013\001\
\005\001\059\001\007\001\013\001\009\001\028\001\029\001\012\001\
\060\001\143\002\009\001\034\001\142\002\000\000\021\001\073\001\
\028\001\028\001\045\001\028\001\154\002\004\001\156\002\028\001\
\047\001\048\001\031\001\004\001\028\001\004\001\045\001\003\001\
\004\001\005\001\005\001\007\001\008\001\060\001\010\001\011\001\
\012\001\013\001\065\001\003\001\016\001\017\001\018\001\019\001\
\020\001\028\001\009\001\074\001\075\001\004\001\028\001\028\001\
\028\001\029\001\005\001\021\001\006\001\021\001\034\001\000\000\
\003\001\004\001\005\001\045\001\007\001\008\001\004\001\010\001\
\011\001\012\001\013\001\047\001\048\001\016\001\017\001\018\001\
\019\001\020\001\001\001\043\001\044\001\004\001\019\001\045\001\
\021\001\028\001\029\001\021\001\013\001\065\001\013\001\034\001\
\000\000\045\001\028\001\009\001\060\001\031\001\074\001\075\001\
\016\001\021\001\028\001\009\001\047\001\048\001\043\001\044\001\
\069\001\043\001\044\001\003\001\035\001\005\001\013\001\007\001\
\028\001\009\001\004\001\004\001\012\001\004\001\065\001\060\001\
\013\001\016\001\060\001\005\001\005\001\021\001\053\001\074\001\
\075\001\003\001\004\001\005\001\028\001\007\001\008\001\031\001\
\010\001\011\001\012\001\013\001\021\001\016\001\016\001\017\001\
\018\001\019\001\020\001\043\001\044\001\001\000\002\000\003\000\
\004\000\005\000\028\001\029\001\000\000\013\001\001\001\013\001\
\034\001\004\001\043\001\044\001\060\001\044\001\005\001\003\001\
\005\001\007\001\013\001\005\001\005\001\047\001\048\001\003\001\
\005\001\028\001\005\001\060\001\003\001\004\001\005\001\044\001\
\007\001\008\001\049\001\010\001\011\001\012\001\013\001\065\001\
\035\001\016\001\017\001\018\001\019\001\020\001\028\001\005\001\
\074\001\075\001\052\001\006\001\013\001\028\001\029\001\000\000\
\020\001\021\001\053\001\034\001\013\001\003\001\004\001\005\001\
\004\001\007\001\008\001\013\001\010\001\011\001\012\001\013\001\
\047\001\048\001\016\001\017\001\018\001\019\001\020\001\043\001\
\044\001\003\001\005\001\028\001\005\001\028\001\028\001\029\001\
\000\000\028\001\065\001\005\001\034\001\028\001\005\001\013\001\
\060\001\006\001\004\001\074\001\075\001\004\001\006\001\005\001\
\005\001\047\001\048\001\021\001\005\001\038\001\009\001\021\001\
\003\001\004\001\005\001\004\001\007\001\008\001\004\001\010\001\
\011\001\012\001\013\001\065\001\016\001\016\001\017\001\018\001\
\019\001\043\001\044\001\021\001\074\001\075\001\021\001\007\001\
\000\000\028\001\029\001\000\000\045\001\005\001\005\001\034\001\
\028\001\007\001\060\001\047\001\028\001\047\001\006\001\006\001\
\007\001\021\001\009\001\012\001\047\001\048\001\053\001\021\001\
\021\001\028\001\003\001\004\001\005\001\047\001\007\001\008\001\
\005\001\010\001\011\001\012\001\013\001\028\001\065\001\016\001\
\017\001\018\001\019\001\038\001\068\001\043\001\044\001\074\001\
\075\001\021\001\028\001\028\001\029\001\000\000\045\001\045\001\
\005\001\034\001\028\001\003\001\004\001\005\001\060\001\007\001\
\008\001\007\001\010\001\011\001\012\001\013\001\047\001\048\001\
\016\001\017\001\018\001\019\001\013\001\003\001\005\001\021\001\
\013\001\028\001\021\001\008\001\028\001\029\001\000\000\016\001\
\065\001\031\001\034\001\003\001\016\001\016\001\002\001\003\001\
\005\001\074\001\075\001\027\001\045\001\043\001\044\001\047\001\
\048\001\013\001\005\001\015\001\016\001\007\001\003\001\007\001\
\005\001\021\001\007\001\005\001\009\001\005\001\060\001\012\001\
\028\001\065\001\044\001\021\001\007\001\019\001\005\001\021\001\
\004\001\005\001\074\001\075\001\008\001\009\001\010\001\011\001\
\012\001\013\001\005\001\000\000\016\001\017\001\018\001\021\001\
\020\001\043\001\044\001\016\001\056\001\043\001\044\001\021\001\
\028\001\029\001\007\001\012\001\069\001\005\001\034\001\021\001\
\028\001\031\001\060\001\007\001\009\001\020\001\060\001\009\001\
\028\001\009\001\000\000\047\001\048\001\043\001\044\001\000\000\
\000\000\000\000\000\000\005\001\005\001\000\000\028\001\008\001\
\009\001\010\001\011\001\012\001\013\001\065\001\060\001\016\001\
\017\001\018\001\005\001\020\001\028\001\028\001\074\001\075\001\
\028\001\005\001\005\001\028\001\029\001\005\001\020\001\021\001\
\005\001\034\001\005\001\000\000\004\001\005\001\005\001\069\001\
\008\001\007\001\010\001\011\001\012\001\013\001\047\001\048\001\
\016\001\017\001\018\001\005\001\020\001\043\001\044\001\005\001\
\045\001\005\001\020\001\021\001\028\001\029\001\021\001\003\001\
\065\001\005\001\034\001\007\001\000\000\009\001\060\001\005\001\
\012\001\074\001\075\001\007\001\069\001\007\001\007\001\047\001\
\048\001\043\001\044\001\003\001\007\001\005\001\006\001\007\001\
\005\001\009\001\106\000\008\001\007\001\010\001\011\001\012\001\
\013\001\065\001\060\001\016\001\017\001\018\001\107\000\020\001\
\185\000\032\001\074\001\075\001\028\001\205\001\204\001\028\001\
\029\001\071\001\199\000\099\001\112\000\034\001\000\000\249\000\
\040\001\041\001\042\001\043\001\012\001\142\001\145\001\157\002\
\011\002\105\000\047\001\048\001\242\001\021\001\105\000\255\255\
\130\002\004\001\005\001\255\255\060\001\255\255\255\255\010\001\
\011\001\012\001\013\001\255\255\065\001\016\001\017\001\018\001\
\072\001\020\001\255\255\043\001\044\001\074\001\075\001\255\255\
\255\255\028\001\029\001\255\255\255\255\255\255\021\001\034\001\
\000\000\255\255\004\001\005\001\060\001\028\001\008\001\255\255\
\010\001\011\001\255\255\013\001\047\001\048\001\016\001\017\001\
\018\001\255\255\020\001\009\001\043\001\044\001\255\255\255\255\
\255\255\255\255\028\001\029\001\255\255\255\255\065\001\021\001\
\034\001\000\000\012\001\021\001\255\255\060\001\255\255\074\001\
\075\001\031\001\028\001\021\001\255\255\047\001\048\001\255\255\
\255\255\000\000\255\255\255\255\255\255\043\001\044\001\004\001\
\005\001\043\001\044\001\008\001\255\255\010\001\011\001\065\001\
\013\001\043\001\044\001\016\001\017\001\018\001\060\001\020\001\
\074\001\075\001\060\001\255\255\255\255\255\255\255\255\028\001\
\029\001\012\001\060\001\255\255\255\255\034\001\255\255\255\255\
\255\255\255\255\021\001\255\255\255\255\255\255\004\001\005\001\
\000\000\255\255\047\001\048\001\010\001\011\001\012\001\013\001\
\255\255\255\255\016\001\017\001\018\001\255\255\020\001\255\255\
\043\001\044\001\255\255\255\255\065\001\255\255\028\001\029\001\
\255\255\255\255\255\255\021\001\034\001\074\001\075\001\004\001\
\005\001\060\001\028\001\008\001\255\255\010\001\011\001\255\255\
\013\001\047\001\048\001\016\001\017\001\018\001\255\255\020\001\
\255\255\043\001\044\001\255\255\255\255\255\255\255\255\028\001\
\029\001\255\255\255\255\065\001\021\001\034\001\255\255\255\255\
\004\001\005\001\060\001\028\001\074\001\075\001\010\001\011\001\
\012\001\013\001\047\001\048\001\016\001\017\001\018\001\255\255\
\020\001\255\255\043\001\044\001\255\255\255\255\255\255\255\255\
\028\001\029\001\021\001\003\001\065\001\005\001\034\001\007\001\
\255\255\009\001\255\255\060\001\012\001\074\001\075\001\255\255\
\255\255\255\255\255\255\047\001\048\001\021\001\255\255\255\255\
\043\001\044\001\004\001\005\001\028\001\255\255\008\001\031\001\
\010\001\011\001\012\001\013\001\255\255\065\001\016\001\017\001\
\018\001\060\001\021\001\043\001\044\001\255\255\074\001\075\001\
\255\255\255\255\028\001\029\001\021\001\255\255\255\255\255\255\
\034\001\255\255\255\255\028\001\060\001\040\001\041\001\042\001\
\043\001\044\001\255\255\255\255\255\255\047\001\048\001\255\255\
\021\001\255\255\043\001\044\001\004\001\005\001\255\255\255\255\
\255\255\060\001\010\001\011\001\012\001\013\001\255\255\065\001\
\016\001\017\001\018\001\060\001\020\001\255\255\043\001\044\001\
\074\001\075\001\255\255\255\255\028\001\029\001\255\255\255\255\
\255\255\255\255\034\001\255\255\255\255\004\001\005\001\060\001\
\255\255\255\255\255\255\010\001\011\001\012\001\013\001\047\001\
\048\001\016\001\017\001\018\001\003\001\255\255\005\001\006\001\
\007\001\255\255\009\001\255\255\255\255\028\001\029\001\255\255\
\255\255\065\001\255\255\034\001\255\255\255\255\021\001\255\255\
\255\255\255\255\074\001\075\001\255\255\028\001\255\255\255\255\
\047\001\048\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\040\001\041\001\042\001\043\001\044\001\255\255\255\255\
\255\255\255\255\065\001\003\001\255\255\005\001\006\001\007\001\
\004\001\009\001\255\255\074\001\075\001\060\001\010\001\011\001\
\012\001\013\001\255\255\255\255\016\001\017\001\018\001\004\001\
\021\001\072\001\255\255\008\001\028\001\010\001\011\001\012\001\
\013\001\029\001\021\001\016\001\017\001\018\001\034\001\255\255\
\040\001\041\001\042\001\255\255\255\255\255\255\043\001\044\001\
\029\001\255\255\255\255\047\001\048\001\034\001\255\255\255\255\
\043\001\044\001\255\255\255\255\060\001\255\255\255\255\060\001\
\255\255\255\255\047\001\048\001\021\001\065\001\255\255\255\255\
\072\001\060\001\004\001\255\255\255\255\255\255\074\001\075\001\
\010\001\011\001\012\001\013\001\065\001\255\255\016\001\017\001\
\018\001\255\255\043\001\044\001\255\255\074\001\075\001\255\255\
\003\001\009\001\005\001\029\001\007\001\255\255\009\001\255\255\
\034\001\012\001\255\255\060\001\255\255\021\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\047\001\048\001\031\001\
\255\255\028\001\255\255\255\255\031\001\255\255\022\001\023\001\
\024\001\025\001\255\255\043\001\044\001\029\001\030\001\065\001\
\043\001\033\001\034\001\035\001\036\001\037\001\255\255\039\001\
\074\001\075\001\255\255\255\255\060\001\255\255\046\001\255\255\
\255\255\060\001\050\001\051\001\021\001\255\255\021\001\055\001\
\056\001\255\255\058\001\021\001\255\255\061\001\062\001\063\001\
\064\001\255\255\028\001\067\001\255\255\031\001\070\001\255\255\
\255\255\073\001\043\001\044\001\043\001\044\001\255\255\255\255\
\001\001\043\001\044\001\004\001\255\255\255\255\255\255\001\001\
\002\001\010\001\004\001\060\001\013\001\060\001\255\255\255\255\
\010\001\018\001\060\001\013\001\003\001\003\001\005\001\005\001\
\007\001\007\001\009\001\009\001\029\001\012\001\012\001\255\255\
\255\255\255\255\035\001\029\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\028\001\028\001"

let yynames_const = "\
  CHOICE\000\
  STAR\000\
  COMMA\000\
  LPAREN\000\
  RPAREN\000\
  LBRACKET\000\
  RBRACKET\000\
  BAR\000\
  SEMI\000\
  NEW\000\
  OUT\000\
  IN\000\
  REPL\000\
  IF\000\
  THEN\000\
  ELSE\000\
  EQUAL\000\
  FUN\000\
  EQUATION\000\
  REDUCTION\000\
  PREDICATE\000\
  PROCESS\000\
  SLASH\000\
  DOT\000\
  EOF\000\
  LET\000\
  QUERY\000\
  BEFORE\000\
  PUTBEGIN\000\
  NONINTERF\000\
  EVENT\000\
  NOT\000\
  ELIMTRUE\000\
  FREE\000\
  SUCHTHAT\000\
  CLAUSES\000\
  RED\000\
  EQUIV\000\
  EQUIVEQ\000\
  WEDGE\000\
  DIFF\000\
  COLON\000\
  NOUNIF\000\
  PHASE\000\
  BARRIER\000\
  AMONG\000\
  WEAKSECRET\000\
  PARAM\000\
  ORTEXT\000\
  FAIL\000\
  GREATER\000\
  TYPE\000\
  SET\000\
  FORALL\000\
  CONST\000\
  INJEVENT\000\
  OR\000\
  CHANNEL\000\
  LETFUN\000\
  DEFINE\000\
  EXPAND\000\
  YIELD\000\
  LEQ\000\
  PROBA\000\
  LBRACE\000\
  RBRACE\000\
  PROOF\000\
  EQUIVALENCE\000\
  OTHERWISE\000\
  TABLE\000\
  INSERT\000\
  GET\000\
  "

let yynames_block = "\
  IDENT\000\
  ATIDENT\000\
  STRING\000\
  INT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 149 "pitparser.mly"
        ( (* Options are ignored, they are supported for compatibility with
             CryptoVerif only *)
          TTypeDecl(_2) :: _5 )
# 1108 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : 'typeidseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : 'typeid) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 153 "pitparser.mly"
 ( (TFunDecl(_2, _4, _7, _8)) :: _10 )
# 1119 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 10 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 8 : 'typeidseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 5 : 'typeid) in
    let _9 = (Parsing.peek_val __caml_parser_env 3 : 'treducmayfail) in
    let _10 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _12 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 156 "pitparser.mly"
 ( (TReducFail(_2,_4,_7,_9, _10)) :: _12 )
# 1131 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'treduc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 159 "pitparser.mly"
 ( (TReduc(_2,_3)) :: _5 )
# 1140 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'neidentseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typeid) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 162 "pitparser.mly"
        ( (List.map (fun x -> TConstDecl(x, _4, _5)) _2) @ _7 )
# 1150 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'eqlist) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 164 "pitparser.mly"
 ( (TEquation(_2, _3)) :: _5 )
# 1159 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 166 "pitparser.mly"
        ( (TEventDecl(_2, [])) :: _4 )
# 1167 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typeidseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 168 "pitparser.mly"
        ( (TEventDecl(_2, _4)) :: _7 )
# 1176 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'typeidseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 170 "pitparser.mly"
        ( (TPredDecl(_2, _4, _6)) :: _8 )
# 1186 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 172 "pitparser.mly"
        ( (TPredDecl(_2, [], _3)) :: _5 )
# 1195 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typeidseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 174 "pitparser.mly"
        ( (TTableDecl(_2, _4)) :: _7 )
# 1204 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'tprocess) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 176 "pitparser.mly"
 ( (TPDef(_2,[],_4)) :: _6 )
# 1213 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'mayfailvartypeseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'tprocess) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 178 "pitparser.mly"
        ( (TPDef(_2,_4,_7)) :: _9 )
# 1223 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 180 "pitparser.mly"
        ( (TLetFun(_2,[],_4)) :: _6 )
# 1232 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'mayfailvartypeseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 182 "pitparser.mly"
        ( (TLetFun(_2,_4,_7)) :: _9 )
# 1242 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 184 "pitparser.mly"
        ( (TSet(_2,S _4)) :: _6 )
# 1251 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 186 "pitparser.mly"
        ( (TSet(_2,S _4)) :: _6 )
# 1260 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 188 "pitparser.mly"
        ( (TSet(_2,I _4)) :: _6 )
# 1269 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'tfnebindingseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 190 "pitparser.mly"
        ( (TNoUnif (_2, _4)) :: _6 )
# 1278 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'tfnebindingseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 192 "pitparser.mly"
        ( (TNoUnif ([], _2)) :: _4 )
# 1286 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'tqueryseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 194 "pitparser.mly"
        ( (TQuery(_2,_4)) :: _6 )
# 1295 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'tqueryseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 196 "pitparser.mly"
        ( (TQuery([],_2)) :: _4 )
# 1303 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'niseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 198 "pitparser.mly"
        ( (TNoninterf(_2, _4)) :: _6 )
# 1312 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'niseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 200 "pitparser.mly"
        ( (TNoninterf([], _2)) :: _4 )
# 1320 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 202 "pitparser.mly"
        ( (TWeaksecret(_2)) :: _4 )
# 1328 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 204 "pitparser.mly"
 ( (TNot(_2, _4)) :: _6 )
# 1337 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 206 "pitparser.mly"
 ( (TNot([], _2)) :: _4 )
# 1345 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'neidentseq) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 208 "pitparser.mly"
        ( (* Supported for compatility with CryptoVerif only *)
          _5 )
# 1355 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 211 "pitparser.mly"
        ( (* Supported for compatility with CryptoVerif only *)
          _4 )
# 1364 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'proof) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 214 "pitparser.mly"
        ( (* Supported for compatility with CryptoVerif only *)
          _5 )
# 1373 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'nemayfailvartypeseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 217 "pitparser.mly"
        ( (TElimtrue (_2,_4)) :: _6 )
# 1382 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 219 "pitparser.mly"
        ( (TElimtrue ([],_2)) :: _4 )
# 1390 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'neidentseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 221 "pitparser.mly"
        ( (* For compatibility with CryptoVerif, allow 
               channel c1...cn. 
             as a synonym for 
               free c1...cn:channel. *)
          (List.map (fun x -> TFree(x, ("channel", dummy_ext), [])) _2) @ _4 )
# 1402 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'neidentseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typeid) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 227 "pitparser.mly"
        ( (List.map (fun x -> TFree(x, _4, _5)) _2) @ _7 )
# 1412 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tclauses) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 229 "pitparser.mly"
        ( (TClauses(_2)) :: _3 )
# 1420 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'typeidseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.tdecl list) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 231 "pitparser.mly"
        ( (TDefine(_2, _4, _7)) :: _9 )
# 1430 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typeidseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 233 "pitparser.mly"
        ( (TExpand(_2, _4)) :: _7 )
# 1439 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    Obj.repr(
# 235 "pitparser.mly"
        ( [] )
# 1445 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.tdecl list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'tprocess) in
    Obj.repr(
# 239 "pitparser.mly"
 ( _1, _3, None )
# 1453 "pitparser.ml"
               : Pitptree.tdecl list * Pitptree.tprocess * Pitptree.tprocess option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.tdecl list) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'tprocess) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'tprocess) in
    Obj.repr(
# 241 "pitparser.mly"
 ( 
	  Param.equivalence := true;
	  _1, _3, Some _4 )
# 1464 "pitparser.ml"
               : Pitptree.tdecl list * Pitptree.tprocess * Pitptree.tprocess option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 249 "pitparser.mly"
        ( _1 )
# 1471 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 251 "pitparser.mly"
        ( _1 )
# 1478 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 253 "pitparser.mly"
        ( string_of_int _1, parse_extent() )
# 1485 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    Obj.repr(
# 255 "pitparser.mly"
        ( "*", parse_extent() )
# 1491 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    Obj.repr(
# 257 "pitparser.mly"
        ( ".", parse_extent() )
# 1497 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    Obj.repr(
# 259 "pitparser.mly"
        ( "set", parse_extent() )
# 1503 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    Obj.repr(
# 261 "pitparser.mly"
        ( "=", parse_extent() )
# 1509 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    Obj.repr(
# 263 "pitparser.mly"
        ( ",", parse_extent() )
# 1515 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'prooftoken) in
    Obj.repr(
# 267 "pitparser.mly"
        ( [_1] )
# 1522 "pitparser.ml"
               : 'proofcommand))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'prooftoken) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'proofcommand) in
    Obj.repr(
# 269 "pitparser.mly"
        ( _1 :: _2 )
# 1530 "pitparser.ml"
               : 'proofcommand))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'proofcommand) in
    Obj.repr(
# 273 "pitparser.mly"
 ( [_1] )
# 1537 "pitparser.ml"
               : 'proof))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'proofcommand) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'proof) in
    Obj.repr(
# 275 "pitparser.mly"
        ( _1 :: _3 )
# 1545 "pitparser.ml"
               : 'proof))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'neidentseq) in
    Obj.repr(
# 281 "pitparser.mly"
        ( _2 )
# 1552 "pitparser.ml"
               : 'options))
; (fun __caml_parser_env ->
    Obj.repr(
# 283 "pitparser.mly"
        ( [] )
# 1558 "pitparser.ml"
               : 'options))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'neidentseq) in
    Obj.repr(
# 287 "pitparser.mly"
    ( _1 :: _3 )
# 1566 "pitparser.ml"
               : 'neidentseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 289 "pitparser.mly"
    ( [_1] )
# 1573 "pitparser.ml"
               : 'neidentseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 293 "pitparser.mly"
    ( None )
# 1579 "pitparser.ml"
               : 'newarg))
; (fun __caml_parser_env ->
    Obj.repr(
# 295 "pitparser.mly"
    ( Some [] )
# 1585 "pitparser.ml"
               : 'newarg))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'neidentseq) in
    Obj.repr(
# 297 "pitparser.mly"
    ( Some (_2) )
# 1592 "pitparser.ml"
               : 'newarg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'typeid) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'nevartype) in
    Obj.repr(
# 301 "pitparser.mly"
        ( (_1,_3)::_5 )
# 1601 "pitparser.ml"
               : 'nevartype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typeid) in
    Obj.repr(
# 304 "pitparser.mly"
        ( [(_1,_3)] )
# 1609 "pitparser.ml"
               : 'nevartype))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'nevartype) in
    Obj.repr(
# 308 "pitparser.mly"
        ( _2 )
# 1616 "pitparser.ml"
               : 'forallvartype))
; (fun __caml_parser_env ->
    Obj.repr(
# 310 "pitparser.mly"
        ( [] )
# 1622 "pitparser.ml"
               : 'forallvartype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 314 "pitparser.mly"
        ( _1 )
# 1629 "pitparser.ml"
               : 'typeid))
; (fun __caml_parser_env ->
    Obj.repr(
# 316 "pitparser.mly"
        ( (* channel is allowed as a type, even though it is also a keyword for the declaration channel c1...cn. *)
          "channel", parse_extent() )
# 1636 "pitparser.ml"
               : 'typeid))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'netypeidseq) in
    Obj.repr(
# 321 "pitparser.mly"
        ( _1 )
# 1643 "pitparser.ml"
               : 'typeidseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 323 "pitparser.mly"
        ( [] )
# 1649 "pitparser.ml"
               : 'typeidseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typeid) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'netypeidseq) in
    Obj.repr(
# 327 "pitparser.mly"
    ( _1 :: _3 )
# 1657 "pitparser.ml"
               : 'netypeidseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typeid) in
    Obj.repr(
# 329 "pitparser.mly"
    ( [_1] )
# 1664 "pitparser.ml"
               : 'netypeidseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 335 "pitparser.mly"
 ( PFail, parse_extent () )
# 1670 "pitparser.ml"
               : Pitptree.term_e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'termseq) in
    Obj.repr(
# 337 "pitparser.mly"
 ( PFunApp (_1, _3), parse_extent() )
# 1678 "pitparser.ml"
               : Pitptree.term_e))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.term_e) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Pitptree.term_e) in
    Obj.repr(
# 339 "pitparser.mly"
        ( Param.has_choice := true; 
	  PFunApp(("choice", parse_extent()), [_3; _5]), parse_extent() )
# 1687 "pitparser.ml"
               : Pitptree.term_e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 342 "pitparser.mly"
 ( PIdent (_1), parse_extent() )
# 1694 "pitparser.ml"
               : Pitptree.term_e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.term_e) in
    Obj.repr(
# 344 "pitparser.mly"
        ( PFunApp(("=", parse_extent()), [_1; _3]), parse_extent() )
# 1702 "pitparser.ml"
               : Pitptree.term_e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.term_e) in
    Obj.repr(
# 346 "pitparser.mly"
        ( PFunApp(("<>", parse_extent()), [_1; _3]), parse_extent() )
# 1710 "pitparser.ml"
               : Pitptree.term_e))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Pitptree.term_e) in
    Obj.repr(
# 348 "pitparser.mly"
        ( PFunApp(("not", parse_extent()), [_3]), parse_extent() )
# 1717 "pitparser.ml"
               : Pitptree.term_e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.term_e) in
    Obj.repr(
# 350 "pitparser.mly"
        ( PFunApp(("||", parse_extent()), [_1; _3]), parse_extent() )
# 1725 "pitparser.ml"
               : Pitptree.term_e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.term_e) in
    Obj.repr(
# 352 "pitparser.mly"
        ( PFunApp(("&&", parse_extent()), [_1; _3]), parse_extent() )
# 1733 "pitparser.ml"
               : Pitptree.term_e))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'termseq) in
    Obj.repr(
# 354 "pitparser.mly"
 ( match _2 with
	  [t] -> t   (* Allow parentheses for priorities of infix operators;
			Tuples cannot have one element. *)
	| l -> PTuple (l), parse_extent() )
# 1743 "pitparser.ml"
               : Pitptree.term_e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'netermseq) in
    Obj.repr(
# 361 "pitparser.mly"
 ( _1 :: _3 )
# 1751 "pitparser.ml"
               : 'netermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.term_e) in
    Obj.repr(
# 363 "pitparser.mly"
 ( [_1] )
# 1758 "pitparser.ml"
               : 'netermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'netermseq) in
    Obj.repr(
# 367 "pitparser.mly"
        ( _1 )
# 1765 "pitparser.ml"
               : 'termseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 369 "pitparser.mly"
        ( [] )
# 1771 "pitparser.ml"
               : 'termseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'netermseq) in
    Obj.repr(
# 375 "pitparser.mly"
    ( (_1, Some _4) )
# 1779 "pitparser.ml"
               : 'ni))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 377 "pitparser.mly"
    ( (_1, None) )
# 1786 "pitparser.ml"
               : 'ni))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ni) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'niseq) in
    Obj.repr(
# 381 "pitparser.mly"
    ( _1 :: _3 )
# 1794 "pitparser.ml"
               : 'niseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ni) in
    Obj.repr(
# 383 "pitparser.mly"
    ( [_1] )
# 1801 "pitparser.ml"
               : 'niseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tquery) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tqueryseq) in
    Obj.repr(
# 389 "pitparser.mly"
    ( _1 :: _3 )
# 1809 "pitparser.ml"
               : 'tqueryseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tquery) in
    Obj.repr(
# 391 "pitparser.mly"
    ( [_1] )
# 1816 "pitparser.ml"
               : 'tqueryseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 395 "pitparser.mly"
    ( PRealQuery(_1) )
# 1823 "pitparser.ml"
               : 'tquery))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'neidentseq) in
    Obj.repr(
# 397 "pitparser.mly"
    ( PPutBegin(false, _4) )
# 1830 "pitparser.ml"
               : 'tquery))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'neidentseq) in
    Obj.repr(
# 399 "pitparser.mly"
    ( PPutBegin(true, _4) )
# 1837 "pitparser.ml"
               : 'tquery))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gtermseq) in
    Obj.repr(
# 403 "pitparser.mly"
 ( PGFunApp (_1, _3), parse_extent() )
# 1845 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 405 "pitparser.mly"
 ( PGIdent (_1), parse_extent() )
# 1852 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'gtermseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 407 "pitparser.mly"
        ( PGPhase(_1, _3, _6), parse_extent() )
# 1861 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'gterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 409 "pitparser.mly"
        ( PGPhase(("table", parse_extent()), [_3], _6), parse_extent() )
# 1869 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 411 "pitparser.mly"
        ( PGFunApp(("=", parse_extent()), [_1; _3]), parse_extent() )
# 1877 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 413 "pitparser.mly"
        ( PGFunApp(("<>", parse_extent()), [_1; _3]), parse_extent() )
# 1885 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gterm) in
    Obj.repr(
# 415 "pitparser.mly"
        ( PGFunApp(("not", parse_extent()), [_3]), parse_extent() )
# 1892 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 417 "pitparser.mly"
        ( PGFunApp(("||", parse_extent()), [_1; _3]), parse_extent() )
# 1900 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 419 "pitparser.mly"
        ( PGFunApp(("&&", parse_extent()), [_1; _3]), parse_extent() )
# 1908 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'gterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'gterm) in
    Obj.repr(
# 421 "pitparser.mly"
        ( PGFunApp(("choice", parse_extent()), [_3; _5]), parse_extent() )
# 1916 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gtermseq) in
    Obj.repr(
# 423 "pitparser.mly"
        ( PGFunApp(("event",parse_extent()), _3), parse_extent() )
# 1923 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gtermseq) in
    Obj.repr(
# 425 "pitparser.mly"
        ( PGFunApp(("inj-event",parse_extent()), _3), parse_extent() )
# 1930 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gterm) in
    Obj.repr(
# 427 "pitparser.mly"
        ( PGFunApp(("table",parse_extent()), [_3]), parse_extent() )
# 1937 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 429 "pitparser.mly"
        ( PGFunApp(("==>", parse_extent()), [_1;_3]), parse_extent() )
# 1945 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'gtermseq) in
    Obj.repr(
# 431 "pitparser.mly"
 ( match _2 with
	  [t] -> t   (* Allow parentheses for priorities of infix operators;
			Tuples cannot have one element. *)
	| l -> PGTuple (l), parse_extent() )
# 1955 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'bindingseq) in
    Obj.repr(
# 436 "pitparser.mly"
        ( PGName (_2, _4), parse_extent() )
# 1963 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 438 "pitparser.mly"
        ( PGName (_2, []), parse_extent() )
# 1970 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 440 "pitparser.mly"
        ( PGLet(_2, _4, _6), parse_extent() )
# 1979 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'negtermseq) in
    Obj.repr(
# 444 "pitparser.mly"
 ( _1 :: _3 )
# 1987 "pitparser.ml"
               : 'negtermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 446 "pitparser.mly"
 ( [_1] )
# 1994 "pitparser.ml"
               : 'negtermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'negtermseq) in
    Obj.repr(
# 450 "pitparser.mly"
        ( _1 )
# 2001 "pitparser.ml"
               : 'gtermseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 452 "pitparser.mly"
        ( [] )
# 2007 "pitparser.ml"
               : 'gtermseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'nesbindingseq) in
    Obj.repr(
# 457 "pitparser.mly"
        ( (("!" ^ (string_of_int (_2)), parse_extent()), _4) :: _6 )
# 2016 "pitparser.ml"
               : 'nesbindingseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 459 "pitparser.mly"
        ( [(("!" ^ (string_of_int (_2)), parse_extent()), _4)] )
# 2024 "pitparser.ml"
               : 'nesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'nesbindingseq) in
    Obj.repr(
# 461 "pitparser.mly"
        ( (_1, _3) :: _5 )
# 2033 "pitparser.ml"
               : 'nesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 463 "pitparser.mly"
        ( [(_1, _3)] )
# 2041 "pitparser.ml"
               : 'nesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nesbindingseq) in
    Obj.repr(
# 467 "pitparser.mly"
        ( _1 )
# 2048 "pitparser.ml"
               : 'bindingseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 469 "pitparser.mly"
        ( [] )
# 2054 "pitparser.ml"
               : 'bindingseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'tfnebindingseq) in
    Obj.repr(
# 475 "pitparser.mly"
        ( BFLet(_2, _4, _6) )
# 2063 "pitparser.ml"
               : 'tfnebindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'gformatseq) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'optphase) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'optint) in
    Obj.repr(
# 477 "pitparser.mly"
        ( BFNoUnif((_1,_3,_5), _6) )
# 2073 "pitparser.ml"
               : 'tfnebindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Pitptree.ident) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'optint) in
    Obj.repr(
# 479 "pitparser.mly"
        ( BFNoUnif((_1,[],-1),_2) )
# 2081 "pitparser.ml"
               : 'tfnebindingseq))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'gformatseq) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'optphase) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'optint) in
    Obj.repr(
# 481 "pitparser.mly"
        ( BFNoUnif((("table", parse_extent()),_3,_5), _6) )
# 2090 "pitparser.ml"
               : 'tfnebindingseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 485 "pitparser.mly"
    ( _2 )
# 2097 "pitparser.ml"
               : 'optphase))
; (fun __caml_parser_env ->
    Obj.repr(
# 487 "pitparser.mly"
    ( -1 )
# 2103 "pitparser.ml"
               : 'optphase))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 491 "pitparser.mly"
    ( _2 )
# 2110 "pitparser.ml"
               : 'optint))
; (fun __caml_parser_env ->
    Obj.repr(
# 493 "pitparser.mly"
    ( -1 )
# 2116 "pitparser.ml"
               : 'optint))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gformatseq) in
    Obj.repr(
# 497 "pitparser.mly"
 ( PFGFunApp (_1, _3), parse_extent() )
# 2124 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'gformat) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'gformat) in
    Obj.repr(
# 499 "pitparser.mly"
 ( PFGFunApp (("choice", parse_extent()), [_3; _5]), parse_extent() )
# 2132 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 501 "pitparser.mly"
 ( PFGIdent (_1), parse_extent() )
# 2139 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'gformatseq) in
    Obj.repr(
# 503 "pitparser.mly"
 ( match _2 with
	  [t] -> t   (* Allow parentheses for priorities of infix operators;
			Tuples cannot have one element. *)
	| l -> PFGTuple (_2), parse_extent() )
# 2149 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'fbindingseq) in
    Obj.repr(
# 508 "pitparser.mly"
        ( PFGName (_2, _4), parse_extent() )
# 2157 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 510 "pitparser.mly"
        ( PFGName (_2, []), parse_extent() )
# 2164 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 512 "pitparser.mly"
        ( PFGAny (_2), parse_extent() )
# 2171 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'gformat) in
    Obj.repr(
# 514 "pitparser.mly"
        ( PFGLet(_2, _4, _6), parse_extent() )
# 2180 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'negformatseq) in
    Obj.repr(
# 519 "pitparser.mly"
 ( _1 :: _3 )
# 2188 "pitparser.ml"
               : 'negformatseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gformat) in
    Obj.repr(
# 521 "pitparser.mly"
 ( [_1] )
# 2195 "pitparser.ml"
               : 'negformatseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'negformatseq) in
    Obj.repr(
# 525 "pitparser.mly"
        ( _1 )
# 2202 "pitparser.ml"
               : 'gformatseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 527 "pitparser.mly"
        ( [] )
# 2208 "pitparser.ml"
               : 'gformatseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'fnesbindingseq) in
    Obj.repr(
# 532 "pitparser.mly"
        ( (("!" ^ (string_of_int (_2)), parse_extent()), _4) :: _6 )
# 2217 "pitparser.ml"
               : 'fnesbindingseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'gformat) in
    Obj.repr(
# 534 "pitparser.mly"
        ( [(("!" ^ (string_of_int (_2)), parse_extent()), _4)] )
# 2225 "pitparser.ml"
               : 'fnesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'fnesbindingseq) in
    Obj.repr(
# 536 "pitparser.mly"
        ( (_1, _3) :: _5 )
# 2234 "pitparser.ml"
               : 'fnesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gformat) in
    Obj.repr(
# 538 "pitparser.mly"
        ( [(_1, _3)] )
# 2242 "pitparser.ml"
               : 'fnesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fnesbindingseq) in
    Obj.repr(
# 542 "pitparser.mly"
        ( _1 )
# 2249 "pitparser.ml"
               : 'fbindingseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 544 "pitparser.mly"
        ( [] )
# 2255 "pitparser.ml"
               : 'fbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typeid) in
    Obj.repr(
# 550 "pitparser.mly"
 ( (_1,_3, false) )
# 2263 "pitparser.ml"
               : 'mayfailvartype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'typeid) in
    Obj.repr(
# 553 "pitparser.mly"
 ( (_1,_3, true) )
# 2271 "pitparser.ml"
               : 'mayfailvartype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mayfailvartype) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'nemayfailvartypeseq) in
    Obj.repr(
# 557 "pitparser.mly"
 ( _1::_3 )
# 2279 "pitparser.ml"
               : 'nemayfailvartypeseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'mayfailvartype) in
    Obj.repr(
# 560 "pitparser.mly"
 ( [_1] )
# 2286 "pitparser.ml"
               : 'nemayfailvartypeseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nemayfailvartypeseq) in
    Obj.repr(
# 564 "pitparser.mly"
        ( _1 )
# 2293 "pitparser.ml"
               : 'mayfailvartypeseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 566 "pitparser.mly"
        ( [] )
# 2299 "pitparser.ml"
               : 'mayfailvartypeseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'nemayfailvartypeseq) in
    Obj.repr(
# 570 "pitparser.mly"
 ( _2 )
# 2306 "pitparser.ml"
               : 'forallmayfailvartype))
; (fun __caml_parser_env ->
    Obj.repr(
# 572 "pitparser.mly"
 ( [] )
# 2312 "pitparser.ml"
               : 'forallmayfailvartype))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'forallmayfailvartype) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.term_e) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Pitptree.term_e) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'treducotherwise) in
    Obj.repr(
# 577 "pitparser.mly"
 ( (_2,_3,_5) :: _6 )
# 2322 "pitparser.ml"
               : 'treducotherwise))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'forallmayfailvartype) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.term_e) in
    Obj.repr(
# 579 "pitparser.mly"
 ( [_2,_3,_5] )
# 2331 "pitparser.ml"
               : 'treducotherwise))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'forallmayfailvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.term_e) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Pitptree.term_e) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'treducotherwise) in
    Obj.repr(
# 583 "pitparser.mly"
 ( (_1,_2,_4) :: _5 )
# 2341 "pitparser.ml"
               : 'treducmayfail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'forallmayfailvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.term_e) in
    Obj.repr(
# 585 "pitparser.mly"
 ( [_1,_2,_4] )
# 2350 "pitparser.ml"
               : 'treducmayfail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'forallvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.term_e) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'treduc) in
    Obj.repr(
# 589 "pitparser.mly"
 ( (_1,_2,_4) :: _6 )
# 2360 "pitparser.ml"
               : 'treduc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'forallvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.term_e) in
    Obj.repr(
# 591 "pitparser.mly"
 ( [_1,_2,_4] )
# 2369 "pitparser.ml"
               : 'treduc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'forallvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.term_e) in
    Obj.repr(
# 597 "pitparser.mly"
    ( [(_1, _2, _4)] )
# 2378 "pitparser.ml"
               : 'eqlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'forallvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.term_e) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'eqlist) in
    Obj.repr(
# 599 "pitparser.mly"
    ( (_1, _2, _4)::_6 )
# 2388 "pitparser.ml"
               : 'eqlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.term_e) in
    Obj.repr(
# 605 "pitparser.mly"
        ( PClause(_1,_3) )
# 2396 "pitparser.ml"
               : 'tclause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.term_e) in
    Obj.repr(
# 607 "pitparser.mly"
        ( PFact(_1) )
# 2403 "pitparser.ml"
               : 'tclause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.term_e) in
    Obj.repr(
# 609 "pitparser.mly"
        ( PEquiv(_1,_3,true) )
# 2411 "pitparser.ml"
               : 'tclause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.term_e) in
    Obj.repr(
# 611 "pitparser.mly"
        ( PEquiv(_1,_3,false) )
# 2419 "pitparser.ml"
               : 'tclause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'forallmayfailvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'tclause) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'tclauses) in
    Obj.repr(
# 615 "pitparser.mly"
 ( (_1,_2) :: _4 )
# 2428 "pitparser.ml"
               : 'tclauses))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'forallmayfailvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tclause) in
    Obj.repr(
# 617 "pitparser.mly"
 ( [_1,_2] )
# 2436 "pitparser.ml"
               : 'tclauses))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tprocess) in
    Obj.repr(
# 623 "pitparser.mly"
 ( _2 )
# 2443 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 625 "pitparser.mly"
 ( PLetDef (_1,[]) )
# 2450 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'ptermseq) in
    Obj.repr(
# 627 "pitparser.mly"
        ( PLetDef (_1, _3) )
# 2458 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 629 "pitparser.mly"
 ( PRepl _2 )
# 2465 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Pitptree.ident) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 631 "pitparser.mly"
 ( (* For convergence with CryptoVerif, we allow an identifier (bound on the number of copies) after a replication; it is simply ignored in ProVerif. *)
          PRepl _5 )
# 2475 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 634 "pitparser.mly"
 ( let x = _1 in
	  if x = 0 then PNil else 
          input_error ("The only integer in a process is 0 for the nil process") (parse_extent()) )
# 2484 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    Obj.repr(
# 638 "pitparser.mly"
        ( (* For convergence with CryptoVerif, we allow yield instead of 0 *)
          PNil )
# 2491 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'newarg) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'typeid) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 641 "pitparser.mly"
 ( PRestr(_2, _3, _5, _6) )
# 2501 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'pterm) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'tprocess) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'optelseprocess) in
    Obj.repr(
# 643 "pitparser.mly"
 ( PTest(_2,_4,_5) )
# 2510 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'pterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'tpattern) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 645 "pitparser.mly"
 ( PInput(_3,_5,_7) )
# 2519 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'pterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 647 "pitparser.mly"
 ( POutput(_3,_5,_7) )
# 2528 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'tpattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 649 "pitparser.mly"
 ( PLet(_2,_4,PNil,PNil) )
# 2536 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'tpattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'tprocess) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'optelseprocess) in
    Obj.repr(
# 651 "pitparser.mly"
 ( PLet(_2,_4,_6,_7) )
# 2546 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 653 "pitparser.mly"
        ( PLetFilter(_2,_4,PNil,PNil) )
# 2554 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'tprocess) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'optelseprocess) in
    Obj.repr(
# 655 "pitparser.mly"
        ( (* Approximating the else clause with a parallel composition
	     is not correct for trace reconstruction *)
          PLetFilter(_2,_4,_6,_7) )
# 2566 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'ptermseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 659 "pitparser.mly"
        ( PInsert(_2, _4, _6) )
# 2575 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'tpatternseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'optinprocess) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'optelseprocess) in
    Obj.repr(
# 661 "pitparser.mly"
        ( PGet(_2, _4, None, _6, _7) )
# 2585 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'tpatternseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'optinprocess) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'optelseprocess) in
    Obj.repr(
# 663 "pitparser.mly"
        ( PGet(_2, _4, Some _7, _8, _9) )
# 2596 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tprocess) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 665 "pitparser.mly"
 ( PPar(_1,_3) )
# 2604 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'ptermseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'newarg) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 667 "pitparser.mly"
        ( PEvent(_2, _4, _6, _7) )
# 2614 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'newarg) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 669 "pitparser.mly"
        ( PEvent(_2, [], _3, _4) )
# 2623 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 671 "pitparser.mly"
        ( if (_2) <= 0 then
	    input_error "Phases should be positive integers in processes" (parse_extent());
          PPhase(_2, _3) )
# 2633 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 675 "pitparser.mly"
        ( if (_2) <= 0 then
	    input_error "Sync numbers should be positive integers" (parse_extent());
          Param.has_barrier := true;
	  PBarrier(_2, None, _3) )
# 2644 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 680 "pitparser.mly"
        ( if (_2) <= 0 then
	    input_error "Sync numbers should be positive integers" (parse_extent());
          Param.has_barrier := true;
	  PBarrier(_2, Some _4, _6) )
# 2656 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 687 "pitparser.mly"
        ( _2 )
# 2663 "pitparser.ml"
               : 'opttprocess))
; (fun __caml_parser_env ->
    Obj.repr(
# 689 "pitparser.mly"
        ( PNil )
# 2669 "pitparser.ml"
               : 'opttprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 693 "pitparser.mly"
        ( _2 )
# 2676 "pitparser.ml"
               : 'optinprocess))
; (fun __caml_parser_env ->
    Obj.repr(
# 695 "pitparser.mly"
        ( PNil )
# 2682 "pitparser.ml"
               : 'optinprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 699 "pitparser.mly"
        ( _2 )
# 2689 "pitparser.ml"
               : 'optelseprocess))
; (fun __caml_parser_env ->
    Obj.repr(
# 701 "pitparser.mly"
        ( PNil )
# 2695 "pitparser.ml"
               : 'optelseprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 705 "pitparser.mly"
    ( PPatVar(_1, None) )
# 2702 "pitparser.ml"
               : 'tpattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typeid) in
    Obj.repr(
# 707 "pitparser.mly"
    ( PPatVar(_1, Some _3) )
# 2710 "pitparser.ml"
               : 'tpattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tpatternseq) in
    Obj.repr(
# 709 "pitparser.mly"
    ( match _2 with
	  [t] -> t   (* Allow parentheses for priorities of infix operators;
			Tuples cannot have one element. *)
	| l -> PPatTuple(_2) )
# 2720 "pitparser.ml"
               : 'tpattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'tpatternseq) in
    Obj.repr(
# 714 "pitparser.mly"
    ( PPatFunApp(_1,_3) )
# 2728 "pitparser.ml"
               : 'tpattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 716 "pitparser.mly"
    ( PPatEqual(_2) )
# 2735 "pitparser.ml"
               : 'tpattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tpattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'nepatternseq) in
    Obj.repr(
# 720 "pitparser.mly"
    ( _1 :: _3 )
# 2743 "pitparser.ml"
               : 'nepatternseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tpattern) in
    Obj.repr(
# 722 "pitparser.mly"
    ( [_1] )
# 2750 "pitparser.ml"
               : 'nepatternseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nepatternseq) in
    Obj.repr(
# 726 "pitparser.mly"
    ( _1 )
# 2757 "pitparser.ml"
               : 'tpatternseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 728 "pitparser.mly"
    ( [] )
# 2763 "pitparser.ml"
               : 'tpatternseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'ptermseq) in
    Obj.repr(
# 734 "pitparser.mly"
 ( PPFunApp (_1, _3), parse_extent() )
# 2771 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'pterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'pterm) in
    Obj.repr(
# 736 "pitparser.mly"
        ( Param.has_choice := true; 
	  PPFunApp(("choice", parse_extent()), [_3; _5]), parse_extent() )
# 2780 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 739 "pitparser.mly"
 ( PPIdent (_1), parse_extent() )
# 2787 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 741 "pitparser.mly"
        ( PPFunApp(("=", parse_extent()), [_1; _3]), parse_extent() )
# 2795 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 743 "pitparser.mly"
        ( PPFunApp(("<>", parse_extent()), [_1; _3]), parse_extent() )
# 2803 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'pterm) in
    Obj.repr(
# 745 "pitparser.mly"
        ( PPFunApp(("not", parse_extent()), [_3]), parse_extent() )
# 2810 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 747 "pitparser.mly"
        ( PPFunApp(("||", parse_extent()), [_1; _3]), parse_extent() )
# 2818 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 749 "pitparser.mly"
        ( PPFunApp(("&&", parse_extent()), [_1; _3]), parse_extent() )
# 2826 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'newarg) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'typeid) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 751 "pitparser.mly"
 ( PPRestr(_2, _3, _5, _7), parse_extent() )
# 2836 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 753 "pitparser.mly"
 ( PPTest(_2,_4,None), parse_extent() )
# 2844 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'pterm) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 755 "pitparser.mly"
 ( PPTest(_2,_4,Some _6), parse_extent() )
# 2853 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'tpattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 757 "pitparser.mly"
 ( PPLet(_2,_4,_6,None), parse_extent() )
# 2862 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'tpattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 759 "pitparser.mly"
 ( PPLet(_2,_4,_6,Some _8), parse_extent() )
# 2872 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 761 "pitparser.mly"
        ( PPLetFilter(_2,_4,_6,None), parse_extent() )
# 2881 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 763 "pitparser.mly"
        ( PPLetFilter(_2,_4,_6,Some _8), parse_extent() )
# 2891 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'ptermseq) in
    Obj.repr(
# 765 "pitparser.mly"
 ( match _2 with
	  [t] -> t   (* Allow parentheses for priorities of infix operators;
			Tuples cannot have one element. *)
	| l -> PPTuple (l), parse_extent() )
# 2901 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'neptermseq) in
    Obj.repr(
# 772 "pitparser.mly"
 ( _1 :: _3 )
# 2909 "pitparser.ml"
               : 'neptermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 774 "pitparser.mly"
 ( [_1] )
# 2916 "pitparser.ml"
               : 'neptermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'neptermseq) in
    Obj.repr(
# 778 "pitparser.mly"
        ( _1 )
# 2923 "pitparser.ml"
               : 'ptermseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 780 "pitparser.mly"
        ( [] )
# 2929 "pitparser.ml"
               : 'ptermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 786 "pitparser.mly"
    ( _1 )
# 2936 "pitparser.ml"
               : 'tag))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 788 "pitparser.mly"
    ( _1 )
# 2943 "pitparser.ml"
               : 'tag))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tag) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tag) in
    Obj.repr(
# 792 "pitparser.mly"
    ( [_1;_3] )
# 2951 "pitparser.ml"
               : 'onepermut))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tag) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'onepermut) in
    Obj.repr(
# 794 "pitparser.mly"
    ( _1 :: _3 )
# 2959 "pitparser.ml"
               : 'onepermut))
; (fun __caml_parser_env ->
    Obj.repr(
# 798 "pitparser.mly"
    ( [] )
# 2965 "pitparser.ml"
               : Pitptree.ident list list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'onepermut) in
    Obj.repr(
# 800 "pitparser.mly"
    ( [_1] )
# 2972 "pitparser.ml"
               : Pitptree.ident list list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'onepermut) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident list list) in
    Obj.repr(
# 802 "pitparser.mly"
    ( _1 :: _3 )
# 2980 "pitparser.ml"
               : Pitptree.ident list list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident list) in
    Obj.repr(
# 810 "pitparser.mly"
    ( _1 :: _3 )
# 2988 "pitparser.ml"
               : Pitptree.ident list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 812 "pitparser.mly"
    ( [_1] )
# 2995 "pitparser.ml"
               : Pitptree.ident list))
(* Entry all *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry lib *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry permut *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry order *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry term *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let all (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Pitptree.tdecl list * Pitptree.tprocess * Pitptree.tprocess option)
let lib (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Pitptree.tdecl list)
let permut (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 3 lexfun lexbuf : Pitptree.ident list list)
let order (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 4 lexfun lexbuf : Pitptree.ident list)
let term (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 5 lexfun lexbuf : Pitptree.term_e)
